[{"path":"https://pjt222.github.io/putior/dev/CLAUDE.html","id":null,"dir":"","previous_headings":"","what":"CLAUDE.md","title":"CLAUDE.md","text":"file provides guidance AI assistants working code repository.","code":""},{"path":"https://pjt222.github.io/putior/dev/CLAUDE.html","id":"repository-overview","dir":"","previous_headings":"","what":"Repository Overview","title":"CLAUDE.md","text":"putior R package extracts structured annotations source code files generates Mermaid flowchart diagrams visualizing workflows data pipelines. supports R, Python, SQL, Shell, Julia files. Status: Production-ready, passing checks, excellent documentation","code":""},{"path":[]},{"path":"https://pjt222.github.io/putior/dev/CLAUDE.html","id":"critical-files-for-development","dir":"","previous_headings":"Development Environment Setup","what":"Critical Files for Development","title":"CLAUDE.md","text":".Renviron: Contains Pandoc path vignette building: RSTUDIO_PANDOC=\"C:/Program Files/RStudio/resources/app/bin/quarto/bin/tools\" .Rprofile: Contains renv activation conditional acquaint MCP session loading NEVER delete files - essential development workflow","code":""},{"path":"https://pjt222.github.io/putior/dev/CLAUDE.html","id":"key-commands","dir":"","previous_headings":"Development Environment Setup","what":"Key Commands","title":"CLAUDE.md","text":"devtools::check() - Full package check (requires Pandoc configured) R CMD check putior_X.X.X.tar.gz - Check built package tarball devtools::spell_check() - Spell checking (uses inst/WORDLIST)","code":""},{"path":[]},{"path":"https://pjt222.github.io/putior/dev/CLAUDE.html","id":"hex-sticker-organization","dir":"","previous_headings":"Package Structure and Assets","what":"Hex Sticker Organization","title":"CLAUDE.md","text":"inst/hex-sticker/handcrafted/ - Original Draw.io designs (primary display assets) inst/hex-sticker/generated/ - R-generated stickers (development/comparison) Main package logos: man/figures/logo.png|svg (uses handcrafted versions) Favicon files: pkgdown/favicon/ (use handcrafted design)","code":""},{"path":"https://pjt222.github.io/putior/dev/CLAUDE.html","id":"self-documentation-excellence","dir":"","previous_headings":"Package Structure and Assets","what":"Self-Documentation Excellence","title":"CLAUDE.md","text":"Package uses PUT annotation system document internal workflow put('./R/') extracts putior‚Äôs workflow (10 nodes) Demonstrates ‚Äúeating dog food‚Äù principle Self-generated diagram shows: file scanning ‚Üí annotation processing ‚Üí validation ‚Üí parsing ‚Üí conversion ‚Üí diagram generation","code":""},{"path":[]},{"path":"https://pjt222.github.io/putior/dev/CLAUDE.html","id":"cleanup-guidelines","dir":"","previous_headings":"File Management Best Practices","what":"Cleanup Guidelines","title":"CLAUDE.md","text":"Safe remove (temporary/generated files): - R CMD check directories (*.Rcheck/) - Build artifacts (*.tar.gz, Meta/, doc/) - Generated sites (docs/) - Cache files (*.rds root) - RStudio cache (.Rproj.user/) NEVER remove (critical development files): - .Renviron - Contains essential environment variables - .Rprofile - Contains development session configuration - User session data (.RData, .Rhistory) without explicit permission","code":""},{"path":"https://pjt222.github.io/putior/dev/CLAUDE.html","id":"ignore-file-strategy","dir":"","previous_headings":"File Management Best Practices","what":"Ignore File Strategy","title":"CLAUDE.md","text":".gitignore: Excludes user-specific files preserves package assets .Rbuildignore: Excludes development files package builds Important: Use specific patterns, avoid overly broad exclusions like *.png","code":""},{"path":[]},{"path":"https://pjt222.github.io/putior/dev/CLAUDE.html","id":"r-cmd-check-status","dir":"","previous_headings":"Quality Assurance","what":"R CMD Check Status","title":"CLAUDE.md","text":"Local: 0 errors, 0 warnings, 1 note (timing verification) Win-builder R-devel: ‚úÖ 1 NOTE (new submission ) Win-builder R-release: ‚úÖ 1 NOTE (new submission ) R-hub: ‚úÖ 4/5 platforms PASS (linux, macos, windows, ubuntu-release; nosuggests expected fail) vignettes build successfully Pandoc tests pass (338 tests including multiline annotation support) Comprehensive multiline PUT annotation support implemented","code":""},{"path":"https://pjt222.github.io/putior/dev/CLAUDE.html","id":"documentation-quality","dir":"","previous_headings":"Quality Assurance","what":"Documentation Quality","title":"CLAUDE.md","text":"Vignette rating: 9.2/10 - Exceptional quality Comprehensive getting-started guide real-world examples Complete self-documentation workflow README auto-generated examples capability","code":""},{"path":"https://pjt222.github.io/putior/dev/CLAUDE.html","id":"cicd-considerations","dir":"","previous_headings":"Quality Assurance","what":"CI/CD Considerations","title":"CLAUDE.md","text":"GitHub Actions may fail development dependencies (like acquaint) aren‚Äôt available Solution: Use conditional loading requireNamespace() .Rprofile Spell check passes cleanly comprehensive WORDLIST","code":""},{"path":[]},{"path":"https://pjt222.github.io/putior/dev/CLAUDE.html","id":"package-dependencies-in-description--renvlock","dir":"","previous_headings":"Development Dependencies vs Package Dependencies","what":"Package Dependencies (in DESCRIPTION & renv.lock)","title":"CLAUDE.md","text":"packages required putior function Listed Imports/Suggests DESCRIPTION Included renv.lock reproducible installation dependencies CRAN (GitHub packages)","code":""},{"path":"https://pjt222.github.io/putior/dev/CLAUDE.html","id":"development-only-tools-not-in-renvlock","dir":"","previous_headings":"Development Dependencies vs Package Dependencies","what":"Development-Only Tools (NOT in renv.lock)","title":"CLAUDE.md","text":"acquaint: MCP server AI-assisted development btw: Dependency acquaint Install separately needed: remotes::install_github(\"posit-dev/acquaint\") Loaded conditionally .Rprofile available Excluded renv.lock avoid GitHub credential warnings users Configure renv ignore: renv::settings$ignored.packages(c(\"acquaint\", \"btw\"))","code":""},{"path":"https://pjt222.github.io/putior/dev/CLAUDE.html","id":"recent-major-accomplishments","dir":"","previous_headings":"","what":"Recent Major Accomplishments","title":"CLAUDE.md","text":"Multiline annotation support - Implemented backslash continuation syntax Hex sticker organization - Clean separation handcrafted vs generated assets Development environment restoration - Proper .Renviron/.Rprofile setup File structure cleanup - Removed 4.2MB temporary files preserving essentials CI/CD fixes - Resolved GitHub Actions failures conditional package loading Documentation excellence - High-quality vignettes self-documentation Spelling compliance - Complete WORDLIST technical terms proper names Clean renv.lock - Removed development-GitHub dependencies eliminate credential warnings","code":""},{"path":"https://pjt222.github.io/putior/dev/CLAUDE.html","id":"package-readiness","dir":"","previous_headings":"","what":"Package Readiness","title":"CLAUDE.md","text":"‚úÖ Production ready - checks passing ‚úÖ CRAN submission ready - Comprehensive documentation testing ‚úÖ Self-documenting - Demonstrates capabilities effectively ‚úÖ Clean codebase - Well-organized file structure ignore patterns","code":""},{"path":"https://pjt222.github.io/putior/dev/CLAUDE.html","id":"development-best-practices-references","dir":"","previous_headings":"","what":"Development Best Practices References","title":"CLAUDE.md","text":"@../development-guides/r-package-development-best-practices.md @../development-guides/wsl-rstudio-claude-integration.md @../development-guides/general-development-setup.md @../development-guides/quick-reference.md","code":""},{"path":[]},{"path":"https://pjt222.github.io/putior/dev/CRAN-SUBMISSION-CHECKLIST.html","id":"id_-completed-steps","dir":"","previous_headings":"","what":"‚úÖ Completed Steps","title":"CRAN Submission Checklist for putior","text":"DESCRIPTION file complete required fields NEWS.md created version history functions documented roxygen2 Vignette created properly built (getting-started.Rmd) Examples use  appropriately R CMD check passes locally (Status: OK - 0 errors, 0 warnings, 0 notes) Tests good coverage (338 tests) problematic files (.RData, .Rhistory removed) .Rbuildignore properly configured exclude renv/ Vignettes build correctly inst/doc directory Local Windows 11, R 4.5.0: Status OK GitHub Actions CI (Windows, macOS, Ubuntu): passing Win-builder R-devel (2025-06-15 r88316): ‚úÖ 1 NOTE (new submission) Win-builder R-release (4.5.0): ‚úÖ 1 NOTE (new submission) R-hub v2 multi-platform checks: ‚úÖ COMPLETED (4/5 platforms PASS, nosuggests expected fail) Spell check passes (WORDLIST updated) URL check passes cran-comments.md updated latest results","code":""},{"path":[]},{"path":"https://pjt222.github.io/putior/dev/CRAN-SUBMISSION-CHECKLIST.html","id":"id_1-monitor-platform-check-results","dir":"","previous_headings":"üìã Remaining Steps","what":"1. Monitor Platform Check Results","title":"CRAN Submission Checklist for putior","text":"Win-builder results ‚úÖ RECEIVED: - R-devel: https://win-builder.r-project.org/v75QSLo869S1 - Status: 1 NOTE (new submission) - R-release: https://win-builder.r-project.org/EIZ5hHdOpuJm - Status: 1 NOTE (new submission) R-hub results ‚úÖ COMPLETED: - Results: https://github.com/pjt222/putior/actions/runs/15684902318 - Status: 4/5 platforms PASS (linux, macos, windows, ubuntu-release) - nosuggests: Expected fail (vignettes require rmarkdown Suggests)","code":""},{"path":"https://pjt222.github.io/putior/dev/CRAN-SUBMISSION-CHECKLIST.html","id":"id_2-final-pre-submission-check","dir":"","previous_headings":"üìã Remaining Steps","what":"2. Final Pre-submission Check","title":"CRAN Submission Checklist for putior","text":"platform results available:","code":"# Final comprehensive check devtools::check(manual = TRUE, cran = TRUE)  # Ensure build artifacts are clean R CMD build . R CMD check putior_0.1.0.tar.gz"},{"path":"https://pjt222.github.io/putior/dev/CRAN-SUBMISSION-CHECKLIST.html","id":"id_3-update-cran-commentsmd","dir":"","previous_headings":"üìã Remaining Steps","what":"3. Update cran-comments.md","title":"CRAN Submission Checklist for putior","text":"platform results received: - Update actual win-builder results - Include R-hub platform check outcomes - Note platform-specific issues","code":""},{"path":"https://pjt222.github.io/putior/dev/CRAN-SUBMISSION-CHECKLIST.html","id":"id_4-submit-to-cran","dir":"","previous_headings":"üìã Remaining Steps","what":"4. Submit to CRAN","title":"CRAN Submission Checklist for putior","text":": - Run final checks - Build source package - Upload CRAN‚Äôs submission portal - Create git tag release","code":"# This will guide you through the submission process devtools::release()"},{"path":"https://pjt222.github.io/putior/dev/CRAN-SUBMISSION-CHECKLIST.html","id":"id_5-post-submission","dir":"","previous_headings":"üìã Remaining Steps","what":"5. Post-Submission","title":"CRAN Submission Checklist for putior","text":"submission: 1. Watch CRAN emails (usually within 24-48 hours) 2. prepared make quick fixes requested 3. accepted, announce release!","code":""},{"path":"https://pjt222.github.io/putior/dev/CRAN-SUBMISSION-CHECKLIST.html","id":"id_-notes","dir":"","previous_headings":"","what":"üìù Notes","title":"CRAN Submission Checklist for putior","text":"First submissions often take longer (2 weeks) CRAN maintainers may request changes - respond promptly single NOTE system time acceptable common package well-prepared good documentation tests Good luck CRAN submission!","code":""},{"path":[]},{"path":"https://pjt222.github.io/putior/dev/IMPLEMENTATION_SUMMARY.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"putior Implementation Summary","text":"putior R package extracts structured annotations source code files generates Mermaid flowchart diagrams visualizing workflows data pipelines.","code":""},{"path":[]},{"path":"https://pjt222.github.io/putior/dev/IMPLEMENTATION_SUMMARY.html","id":"id_1-annotation-system","dir":"","previous_headings":"Key Features Implemented","what":"1. Annotation System","title":"putior Implementation Summary","text":"Syntax: #put key:\"value\", key2:\"value2\" Alternative formats: # put, #put|, #put: Supported file types: R, Python, SQL, Shell, Julia","code":""},{"path":"https://pjt222.github.io/putior/dev/IMPLEMENTATION_SUMMARY.html","id":"id_2-field-changes-and-defaults","dir":"","previous_headings":"Key Features Implemented","what":"2. Field Changes and Defaults","title":"putior Implementation Summary","text":"Renamed: name ‚Üí id (better graph theory alignment) UUID Auto-generation: id omitted, automatically generates UUID Output Defaulting: output omitted, defaults current file name Validation: Empty id:\"\" generates warning; missing id gets UUID","code":""},{"path":"https://pjt222.github.io/putior/dev/IMPLEMENTATION_SUMMARY.html","id":"id_3-diagram-generation","dir":"","previous_headings":"Key Features Implemented","what":"3. Diagram Generation","title":"putior Implementation Summary","text":"5 Themes: light, dark, auto, github, minimal Node Types: input (stadium), process (rectangle), output (subroutine), decision (diamond) Connections: Automatic based matching input/output files Output Options: console, file, clipboard","code":""},{"path":"https://pjt222.github.io/putior/dev/IMPLEMENTATION_SUMMARY.html","id":"id_4-development-environment","dir":"","previous_headings":"Key Features Implemented","what":"4. Development Environment","title":"putior Implementation Summary","text":"R path: /mnt/c/Program Files/R/R-4.5.0/bin/Rscript.exe Pandoc via .Renviron: RSTUDIO_PANDOC=\"C:/Program Files/RStudio/resources/app/bin/quarto/bin/tools\" Dependencies: Minimal (base R + tools), uuid Suggests","code":""},{"path":[]},{"path":"https://pjt222.github.io/putior/dev/IMPLEMENTATION_SUMMARY.html","id":"uuid-generation-parse_put_annotation-in-putiorr","dir":"","previous_headings":"Recent Implementation Details","what":"UUID Generation (parse_put_annotation in putior.R)","title":"putior Implementation Summary","text":"","code":"# Generate UUID if id is missing (not if it's empty) if (is.null(properties$id) && requireNamespace(\"uuid\", quietly = TRUE)) {   properties$id <- uuid::UUIDgenerate() }"},{"path":"https://pjt222.github.io/putior/dev/IMPLEMENTATION_SUMMARY.html","id":"output-defaulting-process_single_file-in-putiorr","dir":"","previous_headings":"Recent Implementation Details","what":"Output Defaulting (process_single_file in putior.R)","title":"putior Implementation Summary","text":"","code":"# Default output to file_name if not specified if (is.null(properties$output) || properties$output == \"\") {   properties$output <- basename(file) }"},{"path":"https://pjt222.github.io/putior/dev/IMPLEMENTATION_SUMMARY.html","id":"source-relationship-tracking","dir":"","previous_headings":"Recent Implementation Details","what":"Source Relationship Tracking","title":"putior Implementation Summary","text":"Pattern scripts source scripts: - Main script: input:\"script1.R,script2.R\" (scripts sourced) - Sourced scripts: output defaults filename - Dependencies sourced scripts use filenames Correct flow direction: - sourced_script.R ‚Üí main_script.R (sourced ) - Represents source(\"file.R\") reads file.R current environment","code":""},{"path":"https://pjt222.github.io/putior/dev/IMPLEMENTATION_SUMMARY.html","id":"theme-system-get_theme_colors-in-put_diagramr","dir":"","previous_headings":"Recent Implementation Details","what":"Theme System (get_theme_colors in put_diagram.R)","title":"putior Implementation Summary","text":"theme defines colors : input, process, output, decision node types Invalid themes trigger warning fallback light theme style_nodes parameter controls whether styling applied","code":""},{"path":"https://pjt222.github.io/putior/dev/IMPLEMENTATION_SUMMARY.html","id":"testing","dir":"","previous_headings":"","what":"Testing","title":"putior Implementation Summary","text":"Comprehensive test coverage features UUID generation tests (uuid package available) Output defaulting tests Theme validation tests tests passing: 0 errors, 0 warnings, 0 notes","code":""},{"path":"https://pjt222.github.io/putior/dev/IMPLEMENTATION_SUMMARY.html","id":"documentation","dir":"","previous_headings":"","what":"Documentation","title":"putior Implementation Summary","text":"README.md: Updated examples showing optional id, output defaulting Vignette: Includes sections auto-generation features NEWS.md: Documents changes CRAN submission CLAUDE.md: Technical implementation details AI assistants","code":""},{"path":"https://pjt222.github.io/putior/dev/IMPLEMENTATION_SUMMARY.html","id":"package-status","dir":"","previous_headings":"","what":"Package Status","title":"putior Implementation Summary","text":"Ready CRAN submission checks passing Documentation complete Examples working","code":""},{"path":"https://pjt222.github.io/putior/dev/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 Philipp Thoss Permission hereby granted, free charge, person obtaining copy software associated documentation files (‚ÄúSoftware‚Äù), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED ‚Äú‚Äù, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://pjt222.github.io/putior/dev/articles/getting-started.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Getting Started with putior","text":"putior package helps document visualize workflows extracting structured annotations R Python source files. vignette shows get started PUT annotations workflow extraction. PUT stands PUT + Input + Output + R, reflecting package‚Äôs core purpose: tracking data inputs outputs analysis pipeline using special annotations.","code":""},{"path":"https://pjt222.github.io/putior/dev/articles/getting-started.html","id":"why-use-putior","dir":"Articles","previous_headings":"","what":"Why Use putior?","title":"Getting Started with putior","text":"Automatic documentation: workflow documentation stays sync code Multi-language support: Works R, Python, SQL, file types Data lineage tracking: See data flows processing steps Team collaboration: Help colleagues understand complex workflows Visual workflow creation: Extract structured data ready flowchart generation","code":""},{"path":"https://pjt222.github.io/putior/dev/articles/getting-started.html","id":"quick-start","dir":"Articles","previous_headings":"","what":"Quick Start","title":"Getting Started with putior","text":"fastest way see putior action run built-example: creates sample multi-language workflow demonstrates workflow extraction capabilities putior.","code":"# Run the complete example source(system.file(\"examples\", \"reprex.R\", package = \"putior\"))"},{"path":[]},{"path":"https://pjt222.github.io/putior/dev/articles/getting-started.html","id":"step-1-add-put-annotations-to-your-code","dir":"Articles","previous_headings":"Basic Workflow","what":"Step 1: Add PUT Annotations to Your Code","title":"Getting Started with putior","text":"PUT annotations special comments describe workflow nodes. ‚Äôs add source files: R script example: Python script example:","code":"# data_processing.R #put id:\"load_data\", label:\"Load Customer Data\", node_type:\"input\", output:\"raw_data.csv\"  # Your actual code data <- read.csv(\"customer_data.csv\") write.csv(data, \"raw_data.csv\")  #put id:\"clean_data\", label:\"Clean and Validate\", node_type:\"process\", input:\"raw_data.csv\", output:\"clean_data.csv\"  # Data cleaning code cleaned_data <- data %>%   filter(!is.na(customer_id)) %>%   mutate(purchase_date = as.Date(purchase_date))  write.csv(cleaned_data, \"clean_data.csv\") # analysis.py #put id:\"analyze_sales\", label:\"Sales Analysis\", node_type:\"process\", input:\"clean_data.csv\", output:\"sales_report.json\"  import pandas as pd import json  # Load cleaned data data = pd.read_csv(\"clean_data.csv\")  # Perform analysis sales_summary = {     \"total_sales\": data[\"amount\"].sum(),     \"avg_order\": data[\"amount\"].mean(),     \"customer_count\": data[\"customer_id\"].nunique() }  # Save results with open(\"sales_report.json\", \"w\") as f:     json.dump(sales_summary, f)"},{"path":"https://pjt222.github.io/putior/dev/articles/getting-started.html","id":"step-2-extract-the-workflow","dir":"Articles","previous_headings":"Basic Workflow","what":"Step 2: Extract the Workflow","title":"Getting Started with putior","text":"Use put() function scan files extract workflow information: Expected output:","code":"# Scan all R and Python files in a directory workflow <- put(\"./src/\")  # View the extracted workflow print(workflow) #>           file_name file_type          input              label            id #> 1 data_processing.R         r           <NA> Load Customer Data     load_data #> 2 data_processing.R         r   raw_data.csv Clean and Validate    clean_data #> 3       analysis.py        py clean_data.csv     Sales Analysis analyze_sales #>   node_type            output #> 1     input      raw_data.csv #> 2   process    clean_data.csv #> 3   process sales_report.json"},{"path":"https://pjt222.github.io/putior/dev/articles/getting-started.html","id":"step-3-understand-the-results","dir":"Articles","previous_headings":"Basic Workflow","what":"Step 3: Understand the Results","title":"Getting Started with putior","text":"output data frame row represents workflow node. columns include: file_name: script contains node file_type: Programming language (r, py, sql, etc.) id: Unique identifier node label: Human-readable description node_type: Type operation (input, process, output) input: Files consumed step output: Files produced step Custom properties: additional metadata defined","code":""},{"path":[]},{"path":"https://pjt222.github.io/putior/dev/articles/getting-started.html","id":"basic-format","dir":"Articles","previous_headings":"PUT Annotation Syntax","what":"Basic Format","title":"Getting Started with putior","text":"general syntax PUT annotations :","code":"#put property1:\"value1\", property2:\"value2\", property3:\"value3\""},{"path":"https://pjt222.github.io/putior/dev/articles/getting-started.html","id":"flexible-syntax-options","dir":"Articles","previous_headings":"PUT Annotation Syntax","what":"Flexible Syntax Options","title":"Getting Started with putior","text":"PUT annotations support several formats fit different coding styles:","code":"#put id:\"my_node\", label:\"My Process\"           # Standard format # put id:\"my_node\", label:\"My Process\"          # Space after # #put| id:\"my_node\", label:\"My Process\"          # Pipe separator #put id:'my_node', label:'Single quotes'        # Single quotes #put id:\"my_node\", label:'Mixed quotes'         # Mixed quote styles"},{"path":"https://pjt222.github.io/putior/dev/articles/getting-started.html","id":"core-properties","dir":"Articles","previous_headings":"PUT Annotation Syntax","what":"Core Properties","title":"Getting Started with putior","text":"putior accepts properties define, commonly used:","code":""},{"path":"https://pjt222.github.io/putior/dev/articles/getting-started.html","id":"standard-node-types","dir":"Articles","previous_headings":"PUT Annotation Syntax","what":"Standard Node Types","title":"Getting Started with putior","text":"consistency across projects, consider using standard node types: input: Data collection, file loading, API calls process: Data transformation, analysis, computation output: Report generation, data export, visualization decision: Conditional logic, branching workflows","code":""},{"path":"https://pjt222.github.io/putior/dev/articles/getting-started.html","id":"custom-properties","dir":"Articles","previous_headings":"PUT Annotation Syntax","what":"Custom Properties","title":"Getting Started with putior","text":"Add properties need visualization metadata: custom properties can used visualization tools workflow management systems.","code":"#put id:\"train_model\", label:\"Train ML Model\", node_type:\"process\", color:\"green\", group:\"machine_learning\", duration:\"45min\", priority:\"high\""},{"path":[]},{"path":"https://pjt222.github.io/putior/dev/articles/getting-started.html","id":"processing-individual-files","dir":"Articles","previous_headings":"Advanced Usage","what":"Processing Individual Files","title":"Getting Started with putior","text":"can process single files instead entire directories:","code":"# Process a single file workflow <- put(\"./scripts/analysis.R\")"},{"path":"https://pjt222.github.io/putior/dev/articles/getting-started.html","id":"recursive-directory-scanning","dir":"Articles","previous_headings":"Advanced Usage","what":"Recursive Directory Scanning","title":"Getting Started with putior","text":"Include subdirectories scan:","code":"# Search subdirectories recursively workflow <- put(\"./project/\", recursive = TRUE)"},{"path":"https://pjt222.github.io/putior/dev/articles/getting-started.html","id":"custom-file-patterns","dir":"Articles","previous_headings":"Advanced Usage","what":"Custom File Patterns","title":"Getting Started with putior","text":"Control files processed:","code":"# Only R files workflow <- put(\"./src/\", pattern = \"\\\\.R$\")  # R and SQL files only workflow <- put(\"./src/\", pattern = \"\\\\.(R|sql)$\")  # All supported file types (default) workflow <- put(\"./src/\", pattern = \"\\\\.(R|r|py|sql|sh|jl)$\")"},{"path":"https://pjt222.github.io/putior/dev/articles/getting-started.html","id":"including-line-numbers","dir":"Articles","previous_headings":"Advanced Usage","what":"Including Line Numbers","title":"Getting Started with putior","text":"debugging annotation issues, include line numbers:","code":"# Include line numbers for debugging workflow <- put(\"./src/\", include_line_numbers = TRUE)"},{"path":"https://pjt222.github.io/putior/dev/articles/getting-started.html","id":"validation-control","dir":"Articles","previous_headings":"Advanced Usage","what":"Validation Control","title":"Getting Started with putior","text":"Control annotation validation:","code":"# Enable validation (default) - provides helpful warnings workflow <- put(\"./src/\", validate = TRUE)  # Disable validation warnings workflow <- put(\"./src/\", validate = FALSE)"},{"path":"https://pjt222.github.io/putior/dev/articles/getting-started.html","id":"automatic-id-generation","dir":"Articles","previous_headings":"Advanced Usage","what":"Automatic ID Generation","title":"Getting Started with putior","text":"omit id field, putior automatically generate unique UUID: Note: provide empty id (e.g., id:\"\"), ‚Äôll get validation warning.","code":"# Annotations without explicit IDs get auto-generated UUIDs #put label:\"Load Data\", node_type:\"input\", output:\"data.csv\" #put label:\"Process Data\", node_type:\"process\", input:\"data.csv\", output:\"clean.csv\"  # Extract workflow - IDs will be auto-generated workflow <- put(\"./\") print(workflow$id)  # Will show UUIDs like \"a1b2c3d4-e5f6-7890-abcd-ef1234567890\""},{"path":"https://pjt222.github.io/putior/dev/articles/getting-started.html","id":"automatic-output-defaulting","dir":"Articles","previous_headings":"Advanced Usage","what":"Automatic Output Defaulting","title":"Getting Started with putior","text":"omit output field, putior automatically uses file name output: feature ensures scripts can connected workflows even explicit output files aren‚Äôt specified.","code":"# In process_data.R: #put label:\"Process Step\", node_type:\"process\", input:\"raw.csv\" # No output specified - will default to \"process_data.R\"  # In analyze_data.R: #put label:\"Analyze\", node_type:\"process\", input:\"process_data.R\", output:\"results.csv\" # This creates a connection from process_data.R to analyze_data.R"},{"path":"https://pjt222.github.io/putior/dev/articles/getting-started.html","id":"tracking-source-relationships","dir":"Articles","previous_headings":"Advanced Usage","what":"Tracking Source Relationships","title":"Getting Started with putior","text":"scripts source scripts, use annotation pattern: correctly shows flow: sourced scripts inputs main script.","code":"# In main.R (sources other scripts): #put label:\"Main Analysis\", input:\"load_data.R,process_data.R\", output:\"report.pdf\" source(\"load_data.R\")    # Reading load_data.R into main.R source(\"process_data.R\") # Reading process_data.R into main.R  # In load_data.R (sourced by main.R): #put label:\"Data Loader\", node_type:\"input\" # output defaults to \"load_data.R\"  # In process_data.R (sourced by main.R, depends on load_data.R): #put label:\"Data Processor\", input:\"load_data.R\" # output defaults to \"process_data.R\""},{"path":"https://pjt222.github.io/putior/dev/articles/getting-started.html","id":"real-world-example","dir":"Articles","previous_headings":"","what":"Real-World Example","title":"Getting Started with putior","text":"Let‚Äôs walk complete data science workflow:","code":""},{"path":"https://pjt222.github.io/putior/dev/articles/getting-started.html","id":"data-collection-python","dir":"Articles","previous_headings":"Real-World Example","what":"1. Data Collection (Python)","title":"Getting Started with putior","text":"","code":"# 01_collect_data.py #put id:\"fetch_api_data\", label:\"Fetch Data from API\", node_type:\"input\", output:\"raw_api_data.json\"  import requests import json  response = requests.get(\"https://api.example.com/sales\") data = response.json()  with open(\"raw_api_data.json\", \"w\") as f:     json.dump(data, f)"},{"path":"https://pjt222.github.io/putior/dev/articles/getting-started.html","id":"data-processing-r","dir":"Articles","previous_headings":"Real-World Example","what":"2. Data Processing (R)","title":"Getting Started with putior","text":"","code":"# 02_process_data.R   #put id:\"clean_api_data\", label:\"Clean and Structure Data\", node_type:\"process\", input:\"raw_api_data.json\", output:\"processed_sales.csv\"  library(jsonlite) library(dplyr)  # Load raw data raw_data <- fromJSON(\"raw_api_data.json\")  # Process and clean processed <- raw_data %>%   filter(!is.na(sale_amount)) %>%   mutate(     sale_date = as.Date(sale_date),     sale_amount = as.numeric(sale_amount)   ) %>%   arrange(sale_date)  # Save processed data write.csv(processed, \"processed_sales.csv\", row.names = FALSE)"},{"path":"https://pjt222.github.io/putior/dev/articles/getting-started.html","id":"analysis-and-reporting-r","dir":"Articles","previous_headings":"Real-World Example","what":"3. Analysis and Reporting (R)","title":"Getting Started with putior","text":"","code":"# 03_analyze_report.R #put id:\"sales_analysis\", label:\"Perform Sales Analysis\", node_type:\"process\", input:\"processed_sales.csv\", output:\"analysis_results.rds\" #put id:\"generate_report\", label:\"Generate HTML Report\", node_type:\"output\", input:\"analysis_results.rds\", output:\"sales_report.html\"  library(dplyr)  # Load processed data   sales_data <- read.csv(\"processed_sales.csv\")  # Perform analysis analysis_results <- list(   total_sales = sum(sales_data$sale_amount),   monthly_trends = sales_data %>%      group_by(month = format(sale_date, \"%Y-%m\")) %>%     summarise(monthly_total = sum(sale_amount)),   top_products = sales_data %>%     group_by(product) %>%     summarise(product_sales = sum(sale_amount)) %>%     arrange(desc(product_sales)) %>%     head(10) )  # Save analysis saveRDS(analysis_results, \"analysis_results.rds\")  # Generate report rmarkdown::render(\"report_template.Rmd\",                    output_file = \"sales_report.html\")"},{"path":"https://pjt222.github.io/putior/dev/articles/getting-started.html","id":"extract-the-complete-workflow","dir":"Articles","previous_headings":"Real-World Example","what":"4. Extract the Complete Workflow","title":"Getting Started with putior","text":"show complete data flow: API ‚Üí JSON ‚Üí CSV ‚Üí Analysis ‚Üí Report","code":"# Extract workflow from all files complete_workflow <- put(\"./sales_project/\", recursive = TRUE) print(complete_workflow)"},{"path":[]},{"path":"https://pjt222.github.io/putior/dev/articles/getting-started.html","id":"use-descriptive-names","dir":"Articles","previous_headings":"Best Practices","what":"1. Use Descriptive Names","title":"Getting Started with putior","text":"Choose clear, descriptive names explain step :","code":"# Good #put name:\"load_customer_transactions\", label:\"Load Customer Transaction Data\" #put name:\"calculate_monthly_revenue\", label:\"Calculate Monthly Revenue Totals\"  # Less descriptive #put name:\"step1\", label:\"Load data\" #put name:\"process\", label:\"Do calculations\""},{"path":"https://pjt222.github.io/putior/dev/articles/getting-started.html","id":"document-data-dependencies","dir":"Articles","previous_headings":"Best Practices","what":"2. Document Data Dependencies","title":"Getting Started with putior","text":"Always specify inputs outputs data processing steps:","code":"#put name:\"merge_datasets\", label:\"Merge Customer and Transaction Data\", input:\"customers.csv,transactions.csv\", output:\"merged_data.csv\""},{"path":"https://pjt222.github.io/putior/dev/articles/getting-started.html","id":"use-consistent-node-types","dir":"Articles","previous_headings":"Best Practices","what":"3. Use Consistent Node Types","title":"Getting Started with putior","text":"Stick standard set node types across team:","code":"#put name:\"load_raw_data\", label:\"Load Raw Sales Data\", node_type:\"input\" #put name:\"clean_data\", label:\"Clean and Validate\", node_type:\"process\"   #put name:\"export_results\", label:\"Export Final Results\", node_type:\"output\""},{"path":"https://pjt222.github.io/putior/dev/articles/getting-started.html","id":"add-helpful-metadata","dir":"Articles","previous_headings":"Best Practices","what":"4. Add Helpful Metadata","title":"Getting Started with putior","text":"Include metadata helps workflow understanding:","code":"#put name:\"train_model\", label:\"Train Random Forest Model\", node_type:\"process\", estimated_time:\"30min\", requires:\"tidymodels\", memory_intensive:\"true\""},{"path":"https://pjt222.github.io/putior/dev/articles/getting-started.html","id":"group-related-operations","dir":"Articles","previous_headings":"Best Practices","what":"5. Group Related Operations","title":"Getting Started with putior","text":"Use grouping properties organize complex workflows:","code":"#put name:\"feature_engineering\", label:\"Engineer Features\", group:\"preprocessing\", stage:\"1\" #put name:\"model_training\", label:\"Train Model\", group:\"modeling\", stage:\"2\" #put name:\"model_evaluation\", label:\"Evaluate Model\", group:\"modeling\", stage:\"3\""},{"path":[]},{"path":"https://pjt222.github.io/putior/dev/articles/getting-started.html","id":"no-annotations-found","dir":"Articles","previous_headings":"Troubleshooting","what":"No Annotations Found","title":"Getting Started with putior","text":"put() returns empty data frame: Check file patterns: Ensure files match pattern (default: R, Python, SQL, shell, Julia) Verify annotation syntax: Use is_valid_put_annotation() test individual annotations Check file paths: Ensure directory exists contains expected files","code":"# Test annotation syntax is_valid_put_annotation('#put name:\"test\", label:\"Test Node\"') # Should return TRUE is_valid_put_annotation(\"#put invalid syntax\") # Should return FALSE  # Check what files are found list.files(\"./src/\", pattern = \"\\\\.(R|py)$\")"},{"path":"https://pjt222.github.io/putior/dev/articles/getting-started.html","id":"validation-warnings","dir":"Articles","previous_headings":"Troubleshooting","what":"Validation Warnings","title":"Getting Started with putior","text":"see validation warnings: Missing name: Add name property annotations Invalid node_type: Use standard types (input, process, output) File extensions: Ensure file references include extensions","code":"# Enable detailed validation output workflow <- put(\"./src/\", validate = TRUE, include_line_numbers = TRUE)"},{"path":"https://pjt222.github.io/putior/dev/articles/getting-started.html","id":"parsing-issues","dir":"Articles","previous_headings":"Troubleshooting","what":"Parsing Issues","title":"Getting Started with putior","text":"annotations aren‚Äôt parsed correctly: Check quotes: Ensure values properly quoted Escape commas: Values commas quotes Avoid nested quotes: Use consistent quote styles Good example: Problematic example:","code":"#put name:\"step1\", description:\"Process data, clean outliers\", type:\"process\" #put name:\"step1\", description:Process data, clean outliers, type:process"},{"path":"https://pjt222.github.io/putior/dev/articles/getting-started.html","id":"next-steps","dir":"Articles","previous_headings":"","what":"Next Steps","title":"Getting Started with putior","text":"Now understand basics putior: Try complete example: source(system.file(\"examples\", \"reprex.R\", package = \"putior\")) Add annotations existing projects: Start key data processing scripts Build visualization tools: Use extracted workflow data create flowcharts Integrate CI/CD: Automatically update workflow documentation Explore advanced features: Check advanced usage vignette detailed information, see: - ?put - Complete function documentation - Advanced usage vignette - Complex workflows integration - Best practices vignette - Team collaboration style guides","code":""},{"path":"https://pjt222.github.io/putior/dev/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Philipp Thoss. Author, maintainer.","code":""},{"path":"https://pjt222.github.io/putior/dev/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Thoss P (2025). putior: \"Register - Outputs Workflow Visualization\". R package version 0.1.0.9000, https://pjt222.github.io/putior/.","code":"@Manual{,   title = {putior: \"Register In- and Outputs for Workflow Visualization\"},   author = {Philipp Thoss},   year = {2025},   note = {R package version 0.1.0.9000},   url = {https://pjt222.github.io/putior/}, }"},{"path":"https://pjt222.github.io/putior/dev/index.html","id":"putior-","dir":"","previous_headings":"","what":"putior: Register In- and Outputs for Workflow Visualization","title":"putior: Register In- and Outputs for Workflow Visualization","text":"Extract beautiful workflow diagrams code annotations putior (PUT + Input + Output + R) R package extracts structured annotations source code files creates beautiful Mermaid flowchart diagrams. Perfect documenting data pipelines, workflows, understanding complex codebases.","code":""},{"path":"https://pjt222.github.io/putior/dev/index.html","id":"id_-key-features","dir":"","previous_headings":"","what":"üåü Key Features","title":"putior: Register In- and Outputs for Workflow Visualization","text":"Simple annotations - Add structured comments existing code Beautiful diagrams - Generate professional Mermaid flowcharts File flow tracking - Automatically connects scripts based input/output files Multiple themes - 5 built-themes including GitHub-optimized Cross-language support - Works R, Python, SQL, shell scripts, Julia Flexible output - Console, file, clipboard export Customizable styling - Control colors, direction, node shapes","code":""},{"path":"https://pjt222.github.io/putior/dev/index.html","id":"id_-installation","dir":"","previous_headings":"","what":"üì¶ Installation","title":"putior: Register In- and Outputs for Workflow Visualization","text":"","code":"# Install from CRAN (recommended) install.packages(\"putior\")  # Or install from GitHub (development version) remotes::install_github(\"pjt222/putior\")  # Or with renv renv::install(\"putior\")  # CRAN version renv::install(\"pjt222/putior\")  # GitHub version  # Or with pak (faster) pak::pkg_install(\"putior\")  # CRAN version pak::pkg_install(\"pjt222/putior\")  # GitHub version"},{"path":[]},{"path":"https://pjt222.github.io/putior/dev/index.html","id":"step-1-annotate-your-code","dir":"","previous_headings":"üöÄ Quick Start","what":"Step 1: Annotate Your Code","title":"putior: Register In- and Outputs for Workflow Visualization","text":"Add structured annotations R Python scripts using #put comments: 01_fetch_data.R 02_clean_data.py","code":"#put label:\"Fetch Sales Data\", node_type:\"input\", output:\"sales_data.csv\"  # Your actual code library(readr) sales_data <- fetch_sales_from_api() write_csv(sales_data, \"sales_data.csv\") #put label:\"Clean and Process\", node_type:\"process\", input:\"sales_data.csv\", output:\"clean_sales.csv\"  import pandas as pd df = pd.read_csv(\"sales_data.csv\") # ... data cleaning code ... df.to_csv(\"clean_sales.csv\")"},{"path":"https://pjt222.github.io/putior/dev/index.html","id":"step-2-extract-and-visualize","dir":"","previous_headings":"üöÄ Quick Start","what":"Step 2: Extract and Visualize","title":"putior: Register In- and Outputs for Workflow Visualization","text":"Result:","code":"library(putior)  # Extract workflow from your scripts workflow <- put(\"./scripts/\")  # Generate diagram put_diagram(workflow) flowchart TD     fetch_sales([Fetch Sales Data])     clean_data[Clean and Process]      %% Connections     fetch_sales --> clean_data      %% Styling     classDef inputStyle fill:#dbeafe,stroke:#2563eb,stroke-width:2px,color:#1e40af     class fetch_sales inputStyle     classDef processStyle fill:#ede9fe,stroke:#7c3aed,stroke-width:2px,color:#5b21b6     class clean_data processStyle"},{"path":[]},{"path":"https://pjt222.github.io/putior/dev/index.html","id":"modular-workflow-with-source","dir":"","previous_headings":"üìà Common Data Science Pattern","what":"Modular Workflow with source()","title":"putior: Register In- and Outputs for Workflow Visualization","text":"common data science pattern: modularize functions separate scripts orchestrate main workflow: utils.R - Utility functions analysis.R - Analysis functions main.R - Workflow orchestrator Generated Workflow (Simple): Generated Workflow (Data Artifacts): pattern clearly shows: - Function modules (utils.R, analysis.R) sourced main script - Dependencies modules (analysis depends utils) - Complete data flow artifacts showing terminal outputs like results.csv - Two visualization modes: simple (script connections ) vs.¬†complete (data artifacts)","code":"#put label:\"Data Utilities\", node_type:\"input\"  load_and_clean <- function(file) {   data <- read.csv(file)   data[complete.cases(data), ] }  validate_data <- function(data) {   stopifnot(nrow(data) > 0)   return(data) } #put label:\"Statistical Analysis\", input:\"utils.R\"  perform_analysis <- function(data) {   # Uses utility functions from utils.R   cleaned <- validate_data(data)   summary(cleaned) } #put label:\"Main Analysis Pipeline\", input:\"utils.R,analysis.R\", output:\"results.csv\"  source(\"utils.R\")     # Load utility functions source(\"analysis.R\")  # Load analysis functions  # Execute the pipeline data <- load_and_clean(\"raw_data.csv\") results <- perform_analysis(data) write.csv(results, \"results.csv\") flowchart TD     utils([Data Utilities])     analysis[Statistical Analysis]     main[Main Analysis Pipeline]      %% Connections     utils --> analysis     utils --> main     analysis --> main      %% Styling     classDef inputStyle fill:#dbeafe,stroke:#2563eb,stroke-width:2px,color:#1e40af     class utils inputStyle     classDef processStyle fill:#ede9fe,stroke:#7c3aed,stroke-width:2px,color:#5b21b6     class analysis processStyle     class main processStyle # Show complete data flow including all files put_diagram(workflow, show_artifacts = TRUE) flowchart TD     utils([Data Utilities])     analysis[Statistical Analysis]     main[Main Analysis Pipeline]     artifact_results_csv[(results.csv)]      %% Connections     utils --> analysis     utils --> main     analysis --> main     main --> artifact_results_csv      %% Styling     classDef inputStyle fill:#dbeafe,stroke:#2563eb,stroke-width:2px,color:#1e40af     class utils inputStyle     classDef processStyle fill:#ede9fe,stroke:#7c3aed,stroke-width:2px,color:#5b21b6     class analysis processStyle     class main processStyle     classDef artifactStyle fill:#f3f4f6,stroke:#6b7280,stroke-width:1px,color:#374151     class artifact_results_csv artifactStyle"},{"path":[]},{"path":"https://pjt222.github.io/putior/dev/index.html","id":"basic-workflow","dir":"","previous_headings":"üìä Visualization Examples","what":"Basic Workflow","title":"putior: Register In- and Outputs for Workflow Visualization","text":"","code":"# Simple three-step process workflow <- put(\"./data_pipeline/\") put_diagram(workflow)"},{"path":"https://pjt222.github.io/putior/dev/index.html","id":"advanced-data-science-pipeline","dir":"","previous_headings":"üìä Visualization Examples","what":"Advanced Data Science Pipeline","title":"putior: Register In- and Outputs for Workflow Visualization","text":"‚Äôs putior handles complete data science workflow: File Structure: Generated Workflow:","code":"data_pipeline/ ‚îú‚îÄ‚îÄ 01_fetch_sales.R      # Fetch sales data ‚îú‚îÄ‚îÄ 02_fetch_customers.R  # Fetch customer data ‚îú‚îÄ‚îÄ 03_clean_sales.py     # Clean sales data ‚îú‚îÄ‚îÄ 04_merge_data.R       # Merge datasets ‚îú‚îÄ‚îÄ 05_analyze.py         # Statistical analysis ‚îî‚îÄ‚îÄ 06_report.R           # Generate final report flowchart TD     fetch_sales([Fetch Sales Data])     fetch_customers([Fetch Customer Data])     clean_sales[Clean Sales Data]     merge_data[Merge Datasets]     analyze[Statistical Analysis]     report[[Generate Final Report]]      %% Connections     fetch_sales --> clean_sales     fetch_customers --> merge_data     clean_sales --> merge_data     merge_data --> analyze     analyze --> report      %% Styling     classDef inputStyle fill:#dbeafe,stroke:#2563eb,stroke-width:2px,color:#1e40af     class fetch_sales inputStyle     class fetch_customers inputStyle     classDef processStyle fill:#ede9fe,stroke:#7c3aed,stroke-width:2px,color:#5b21b6     class clean_sales processStyle     class merge_data processStyle     class analyze processStyle     classDef outputStyle fill:#dcfce7,stroke:#16a34a,stroke-width:2px,color:#15803d     class report outputStyle"},{"path":[]},{"path":"https://pjt222.github.io/putior/dev/index.html","id":"embedding-in-documentation","dir":"","previous_headings":"üìã Using the Diagrams","what":"Embedding in Documentation","title":"putior: Register In- and Outputs for Workflow Visualization","text":"generated Mermaid code works perfectly : GitHub README files (native Mermaid support) GitLab documentation Notion pages Obsidian notes Jupyter notebooks (extensions) Sphinx documentation (plugins) Markdown renderer Mermaid support","code":""},{"path":"https://pjt222.github.io/putior/dev/index.html","id":"saving-and-sharing","dir":"","previous_headings":"üìã Using the Diagrams","what":"Saving and Sharing","title":"putior: Register In- and Outputs for Workflow Visualization","text":"","code":"# Save to markdown file put_diagram(workflow, output = \"file\", file = \"workflow.md\")  # Copy to clipboard for pasting put_diagram(workflow, output = \"clipboard\")  # Include title for documentation put_diagram(workflow, output = \"file\", file = \"docs/pipeline.md\",             title = \"Data Processing Pipeline\")"},{"path":"https://pjt222.github.io/putior/dev/index.html","id":"id_-visualization-modes","dir":"","previous_headings":"","what":"üîß Visualization Modes","title":"putior: Register In- and Outputs for Workflow Visualization","text":"putior offers two visualization modes suit different needs:","code":""},{"path":"https://pjt222.github.io/putior/dev/index.html","id":"workflow-boundaries-demo","dir":"","previous_headings":"üîß Visualization Modes","what":"Workflow Boundaries Demo","title":"putior: Register In- and Outputs for Workflow Visualization","text":"First, let‚Äôs see workflow boundaries enhance pipeline visualization: Pipeline Boundaries (Default): Pipeline without Boundaries:","code":"# Complete ETL pipeline with clear start/end boundaries put_diagram(workflow, show_workflow_boundaries = TRUE) flowchart TD     pipeline_start([Data Pipeline Start])     extract_data[Extract Raw Data]     transform_data[Transform Data]     pipeline_end([Pipeline Complete])      %% Connections     pipeline_start --> extract_data     extract_data --> transform_data     transform_data --> pipeline_end      %% Styling     classDef processStyle fill:#ede9fe,stroke:#7c3aed,stroke-width:2px,color:#5b21b6     class extract_data processStyle     class transform_data processStyle     classDef startStyle fill:#fef3c7,stroke:#d97706,stroke-width:3px,color:#92400e     class pipeline_start startStyle     classDef endStyle fill:#dcfce7,stroke:#16a34a,stroke-width:3px,color:#15803d     class pipeline_end endStyle # Clean diagram without workflow control styling put_diagram(workflow, show_workflow_boundaries = FALSE) flowchart TD     pipeline_start([Data Pipeline Start])     extract_data[Extract Raw Data]     transform_data[Transform Data]     pipeline_end([Pipeline Complete])      %% Connections     pipeline_start --> extract_data     extract_data --> transform_data     transform_data --> pipeline_end      %% Styling     classDef processStyle fill:#ede9fe,stroke:#7c3aed,stroke-width:2px,color:#5b21b6     class extract_data processStyle     class transform_data processStyle"},{"path":"https://pjt222.github.io/putior/dev/index.html","id":"simple-mode-default","dir":"","previous_headings":"üîß Visualization Modes","what":"Simple Mode (Default)","title":"putior: Register In- and Outputs for Workflow Visualization","text":"Shows script--script connections - perfect understanding code dependencies: Use : - Documenting code architecture - Showing function dependencies - Clean, simple workflow diagrams","code":"put_diagram(workflow)  # Default: simple mode"},{"path":"https://pjt222.github.io/putior/dev/index.html","id":"artifact-mode-complete-data-flow","dir":"","previous_headings":"üîß Visualization Modes","what":"Artifact Mode (Complete Data Flow)","title":"putior: Register In- and Outputs for Workflow Visualization","text":"Shows data files nodes - provides complete picture data flow including terminal outputs: Use : - Documenting data pipelines - Tracking data lineage - Showing complete input/output flow - Understanding data dependencies","code":"put_diagram(workflow, show_artifacts = TRUE)"},{"path":"https://pjt222.github.io/putior/dev/index.html","id":"comparison-example","dir":"","previous_headings":"üîß Visualization Modes","what":"Comparison Example","title":"putior: Register In- and Outputs for Workflow Visualization","text":"Simple Mode: Artifact Mode:","code":"flowchart TD     load[Load Data] --> process[Process Data]     process --> analyze[Analyze] flowchart TD     load[Load Data]     raw_data[(raw_data.csv)]     process[Process Data]     clean_data[(clean_data.csv)]     analyze[Analyze]     results[(results.json)]      load --> raw_data     raw_data --> process     process --> clean_data     clean_data --> analyze     analyze --> results"},{"path":[]},{"path":"https://pjt222.github.io/putior/dev/index.html","id":"file-labeling","dir":"","previous_headings":"üîß Visualization Modes","what":"File Labeling","title":"putior: Register In- and Outputs for Workflow Visualization","text":"Add file names connections extra clarity:","code":"# Show file names on arrows put_diagram(workflow, show_artifacts = TRUE, show_files = TRUE)"},{"path":"https://pjt222.github.io/putior/dev/index.html","id":"id_-theme-system","dir":"","previous_headings":"","what":"üé® Theme System","title":"putior: Register In- and Outputs for Workflow Visualization","text":"putior provides 5 carefully designed themes optimized different environments:","code":"# Get list of available themes get_diagram_themes()"},{"path":[]},{"path":"https://pjt222.github.io/putior/dev/index.html","id":"theme-examples","dir":"","previous_headings":"üé® Theme System","what":"Theme Examples","title":"putior: Register In- and Outputs for Workflow Visualization","text":"Light Theme Dark Theme Auto Theme (GitHub Adaptive) GitHub Theme (Maximum Compatibility) Minimal Theme","code":"put_diagram(workflow, theme = \"light\") flowchart TD     fetch_data([Fetch API Data])     clean_data[Clean and Validate]     generate_report[[Generate Final Report]]      %% Connections     fetch_data --> clean_data     clean_data --> generate_report      %% Styling     classDef inputStyle fill:#e1f5fe,stroke:#01579b,stroke-width:2px,color:#000000     class fetch_data inputStyle     classDef processStyle fill:#f3e5f5,stroke:#4a148c,stroke-width:2px,color:#000000     class clean_data processStyle     classDef outputStyle fill:#e8f5e8,stroke:#1b5e20,stroke-width:2px,color:#000000     class generate_report outputStyle put_diagram(workflow, theme = \"dark\") flowchart TD     fetch_data([Fetch API Data])     clean_data[Clean and Validate]     generate_report[[Generate Final Report]]      %% Connections     fetch_data --> clean_data     clean_data --> generate_report      %% Styling     classDef inputStyle fill:#1a237e,stroke:#3f51b5,stroke-width:2px,color:#ffffff     class fetch_data inputStyle     classDef processStyle fill:#4a148c,stroke:#9c27b0,stroke-width:2px,color:#ffffff     class clean_data processStyle     classDef outputStyle fill:#1b5e20,stroke:#4caf50,stroke-width:2px,color:#ffffff     class generate_report outputStyle put_diagram(workflow, theme = \"auto\")  # Recommended for GitHub! flowchart TD     fetch_data([Fetch API Data])     clean_data[Clean and Validate]     generate_report[[Generate Final Report]]      %% Connections     fetch_data --> clean_data     clean_data --> generate_report      %% Styling     classDef inputStyle fill:#3b82f6,stroke:#1d4ed8,stroke-width:2px,color:#ffffff     class fetch_data inputStyle     classDef processStyle fill:#8b5cf6,stroke:#6d28d9,stroke-width:2px,color:#ffffff     class clean_data processStyle     classDef outputStyle fill:#10b981,stroke:#047857,stroke-width:2px,color:#ffffff     class generate_report outputStyle put_diagram(workflow, theme = \"github\")  # Best for GitHub README flowchart TD     fetch_data([Fetch API Data])     clean_data[Clean and Validate]     generate_report[[Generate Final Report]]      %% Connections     fetch_data --> clean_data     clean_data --> generate_report      %% Styling     classDef inputStyle fill:#dbeafe,stroke:#2563eb,stroke-width:2px,color:#1e40af     class fetch_data inputStyle     classDef processStyle fill:#ede9fe,stroke:#7c3aed,stroke-width:2px,color:#5b21b6     class clean_data processStyle     classDef outputStyle fill:#dcfce7,stroke:#16a34a,stroke-width:2px,color:#15803d     class generate_report outputStyle put_diagram(workflow, theme = \"minimal\")  # Professional documents flowchart TD     fetch_data([Fetch API Data])     clean_data[Clean and Validate]     generate_report[[Generate Final Report]]      %% Connections     fetch_data --> clean_data     clean_data --> generate_report      %% Styling     classDef inputStyle fill:#f8fafc,stroke:#64748b,stroke-width:1px,color:#1e293b     class fetch_data inputStyle     classDef processStyle fill:#f1f5f9,stroke:#64748b,stroke-width:1px,color:#1e293b     class clean_data processStyle     classDef outputStyle fill:#f8fafc,stroke:#64748b,stroke-width:1px,color:#1e293b     class generate_report outputStyle"},{"path":[]},{"path":"https://pjt222.github.io/putior/dev/index.html","id":"pro-tips","dir":"","previous_headings":"üé® Theme System","what":"Pro Tips","title":"putior: Register In- and Outputs for Workflow Visualization","text":"GitHub: Use theme = \"github\" maximum compatibility, theme = \"auto\" adaptive colors Documentation: Use theme = \"light\" theme = \"dark\" match site Reports: Use theme = \"minimal\" professional, print-friendly diagrams Demos: Light theme usually shows colors best presentations","code":""},{"path":"https://pjt222.github.io/putior/dev/index.html","id":"theme-usage-examples","dir":"","previous_headings":"üé® Theme System","what":"Theme Usage Examples","title":"putior: Register In- and Outputs for Workflow Visualization","text":"","code":"# For GitHub README (recommended) put_diagram(workflow, theme = \"github\")  # For GitHub README (adaptive)   put_diagram(workflow, theme = \"auto\")  # For dark documentation sites put_diagram(workflow, theme = \"dark\", direction = \"LR\")  # For professional reports put_diagram(workflow, theme = \"minimal\", output = \"file\", file = \"report.md\")  # Save all themes for comparison themes <- c(\"light\", \"dark\", \"auto\", \"github\", \"minimal\") for(theme in themes) {   put_diagram(workflow,               theme = theme,              output = \"file\",               file = paste0(\"workflow_\", theme, \".md\"),              title = paste(\"Workflow -\", stringr::str_to_title(theme), \"Theme\")) }"},{"path":[]},{"path":"https://pjt222.github.io/putior/dev/index.html","id":"flow-direction","dir":"","previous_headings":"üîß Customization Options","what":"Flow Direction","title":"putior: Register In- and Outputs for Workflow Visualization","text":"","code":"put_diagram(workflow, direction = \"TD\")  # Top to bottom (default) put_diagram(workflow, direction = \"LR\")  # Left to right   put_diagram(workflow, direction = \"BT\")  # Bottom to top put_diagram(workflow, direction = \"RL\")  # Right to left"},{"path":"https://pjt222.github.io/putior/dev/index.html","id":"node-labels","dir":"","previous_headings":"üîß Customization Options","what":"Node Labels","title":"putior: Register In- and Outputs for Workflow Visualization","text":"","code":"put_diagram(workflow, node_labels = \"name\")   # Show node IDs put_diagram(workflow, node_labels = \"label\")  # Show descriptions (default) put_diagram(workflow, node_labels = \"both\")   # Show name: description"},{"path":"https://pjt222.github.io/putior/dev/index.html","id":"file-connections","dir":"","previous_headings":"üîß Customization Options","what":"File Connections","title":"putior: Register In- and Outputs for Workflow Visualization","text":"","code":"# Show file names on arrows put_diagram(workflow, show_files = TRUE)  # Clean arrows without file names   put_diagram(workflow, show_files = FALSE)"},{"path":"https://pjt222.github.io/putior/dev/index.html","id":"styling-control","dir":"","previous_headings":"üîß Customization Options","what":"Styling Control","title":"putior: Register In- and Outputs for Workflow Visualization","text":"","code":"# Include colored styling (default) put_diagram(workflow, style_nodes = TRUE)  # Plain diagram without colors put_diagram(workflow, style_nodes = FALSE)  # Control workflow boundary styling put_diagram(workflow, show_workflow_boundaries = TRUE)   # Special start/end styling (default) put_diagram(workflow, show_workflow_boundaries = FALSE)  # Regular node styling"},{"path":"https://pjt222.github.io/putior/dev/index.html","id":"workflow-boundaries","dir":"","previous_headings":"üîß Customization Options","what":"Workflow Boundaries","title":"putior: Register In- and Outputs for Workflow Visualization","text":"","code":"# Enable workflow boundaries (default) - start/end get special styling put_diagram(workflow, show_workflow_boundaries = TRUE)  # Disable workflow boundaries - start/end render as regular nodes put_diagram(workflow, show_workflow_boundaries = FALSE)"},{"path":"https://pjt222.github.io/putior/dev/index.html","id":"output-options","dir":"","previous_headings":"üîß Customization Options","what":"Output Options","title":"putior: Register In- and Outputs for Workflow Visualization","text":"","code":"# Console output (default) put_diagram(workflow)  # Save to markdown file put_diagram(workflow, output = \"file\", file = \"my_workflow.md\")  # Copy to clipboard for pasting put_diagram(workflow, output = \"clipboard\")"},{"path":[]},{"path":"https://pjt222.github.io/putior/dev/index.html","id":"basic-syntax","dir":"","previous_headings":"üìù Annotation Reference","what":"Basic Syntax","title":"putior: Register In- and Outputs for Workflow Visualization","text":"PUT annotations follow format:","code":"#put property1:\"value1\", property2:\"value2\", property3:\"value3\""},{"path":"https://pjt222.github.io/putior/dev/index.html","id":"alternative-formats-all-valid","dir":"","previous_headings":"üìù Annotation Reference","what":"Alternative Formats (All Valid)","title":"putior: Register In- and Outputs for Workflow Visualization","text":"","code":"#put id:\"node_id\", label:\"Description\"              # Standard # put id:\"node_id\", label:\"Description\"             # Space after # #put| id:\"node_id\", label:\"Description\"             # Pipe separator #put: id:\"node_id\", label:\"Description\"             # Colon separator"},{"path":"https://pjt222.github.io/putior/dev/index.html","id":"annotations","dir":"","previous_headings":"üìù Annotation Reference","what":"Annotations","title":"putior: Register In- and Outputs for Workflow Visualization","text":"*Note: id omitted, UUID automatically generated. provide empty id (e.g., id:\"\"), ‚Äôll get validation warning.","code":""},{"path":"https://pjt222.github.io/putior/dev/index.html","id":"optional-annotations","dir":"","previous_headings":"üìù Annotation Reference","what":"Optional Annotations","title":"putior: Register In- and Outputs for Workflow Visualization","text":"*Note: output omitted, defaults name file containing annotation. ensures nodes can connected workflows.","code":""},{"path":"https://pjt222.github.io/putior/dev/index.html","id":"node-types-and-shapes","dir":"","previous_headings":"üìù Annotation Reference","what":"Node Types and Shapes","title":"putior: Register In- and Outputs for Workflow Visualization","text":"putior uses data-centric approach workflow boundaries special control elements: Data Processing Nodes: - \"input\" - Data sources, APIs, file readers ‚Üí Stadium shape ([text]) - \"process\" - Data transformation, analysis ‚Üí Rectangle [text] - \"output\" - Final results, reports, exports ‚Üí Subroutine [[text]] - \"decision\" - Conditional logic, branching ‚Üí Diamond text Workflow Control Nodes: - \"start\" - Workflow entry point ‚Üí Stadium shape orange styling - \"end\" - Workflow termination ‚Üí Stadium shape green styling","code":""},{"path":"https://pjt222.github.io/putior/dev/index.html","id":"workflow-boundaries-1","dir":"","previous_headings":"üìù Annotation Reference","what":"Workflow Boundaries","title":"putior: Register In- and Outputs for Workflow Visualization","text":"Control visualization workflow start/end points show_workflow_boundaries: boundaries enabled (default): - node_type:\"start\" gets distinctive orange styling thicker borders - node_type:\"end\" gets distinctive green styling thicker borders boundaries disabled: - Start/end nodes render regular stadium shapes without special colors","code":"# Special workflow boundary styling (default) put_diagram(workflow, show_workflow_boundaries = TRUE)  # Regular nodes without special workflow styling put_diagram(workflow, show_workflow_boundaries = FALSE)"},{"path":"https://pjt222.github.io/putior/dev/index.html","id":"example-annotations","dir":"","previous_headings":"üìù Annotation Reference","what":"Example Annotations","title":"putior: Register In- and Outputs for Workflow Visualization","text":"R Scripts: Python Scripts: Multiple Annotations Per File: Workflow Entry Exit Points: Workflow Boundary Examples: Generated Workflow Boundaries:","code":"#put id:\"load_sales_data\", label:\"Load Sales Data from API\", node_type:\"input\", output:\"raw_sales.csv, metadata.json\"  #put id:\"validate_data\", label:\"Validate and Clean Data\", node_type:\"process\", input:\"raw_sales.csv\", output:\"clean_sales.csv\"  #put id:\"generate_report\", label:\"Generate Executive Summary\", node_type:\"output\", input:\"clean_sales.csv, metadata.json\", output:\"executive_summary.pdf\" #put id:\"collect_data\", label:\"Collect Raw Data\", node_type:\"input\", output:\"raw_data.csv\"  #put id:\"train_model\", label:\"Train ML Model\", node_type:\"process\", input:\"features.csv\", output:\"model.pkl\"  #put id:\"predict\", label:\"Generate Predictions\", node_type:\"output\", input:\"model.pkl, test_data.csv\", output:\"predictions.csv\" # analysis.R #put id:\"create_summary\", label:\"Calculate Summary Stats\", node_type:\"process\", input:\"processed_data.csv\", output:\"summary_stats.json\" #put id:\"create_report\", label:\"Generate Sales Report\", node_type:\"output\", input:\"processed_data.csv\", output:\"sales_report.html\"  # Your R code here... # main_workflow.R #put id:\"workflow_start\", label:\"Start Analysis Pipeline\", node_type:\"start\", output:\"config.json\"  #put id:\"workflow_end\", label:\"Pipeline Complete\", node_type:\"end\", input:\"final_report.pdf\" # Complete pipeline with boundaries #put id:\"pipeline_start\", label:\"Data Pipeline Start\", node_type:\"start\", output:\"raw_config.json\" #put id:\"extract_data\", label:\"Extract Raw Data\", node_type:\"process\", input:\"raw_config.json\", output:\"raw_data.csv\" #put id:\"transform_data\", label:\"Transform Data\", node_type:\"process\", input:\"raw_data.csv\", output:\"clean_data.csv\" #put id:\"pipeline_end\", label:\"Pipeline Complete\", node_type:\"end\", input:\"clean_data.csv\" flowchart TD     pipeline_start([Data Pipeline Start])     extract_data[Extract Raw Data]     transform_data[Transform Data]     pipeline_end([Pipeline Complete])      pipeline_start --> extract_data     extract_data --> transform_data     transform_data --> pipeline_end      classDef startStyle fill:#e8f5e8,stroke:#2e7d32,stroke-width:3px,color:#1b5e20     classDef processStyle fill:#ede9fe,stroke:#7c3aed,stroke-width:2px,color:#5b21b6     classDef endStyle fill:#ffebee,stroke:#c62828,stroke-width:3px,color:#b71c1c     class pipeline_start startStyle     class extract_data,transform_data processStyle     class pipeline_end endStyle"},{"path":"https://pjt222.github.io/putior/dev/index.html","id":"supported-file-types","dir":"","previous_headings":"üìù Annotation Reference","what":"Supported File Types","title":"putior: Register In- and Outputs for Workflow Visualization","text":"putior automatically detects processes file types: - R: .R, .r - Python: .py - SQL: .sql - Shell: .sh - Julia: .jl","code":""},{"path":[]},{"path":"https://pjt222.github.io/putior/dev/index.html","id":"directory-scanning","dir":"","previous_headings":"üõ†Ô∏è Advanced Usage","what":"Directory Scanning","title":"putior: Register In- and Outputs for Workflow Visualization","text":"","code":"# Scan current directory workflow <- put(\".\")  # Scan specific directory workflow <- put(\"./src/\")  # Recursive scanning (include subdirectories) workflow <- put(\"./project/\", recursive = TRUE)  # Custom file patterns workflow <- put(\"./analysis/\", pattern = \"\\\\.(R|py)$\")  # Single file workflow <- put(\"./script.R\")"},{"path":"https://pjt222.github.io/putior/dev/index.html","id":"debugging-and-validation","dir":"","previous_headings":"üõ†Ô∏è Advanced Usage","what":"Debugging and Validation","title":"putior: Register In- and Outputs for Workflow Visualization","text":"","code":"# Include line numbers for debugging workflow <- put(\"./src/\", include_line_numbers = TRUE)  # Disable validation warnings   workflow <- put(\"./src/\", validate = FALSE)  # Test annotation syntax is_valid_put_annotation('#put id:\"test\", label:\"Test Node\"')  # TRUE is_valid_put_annotation(\"#put invalid syntax\")                 # FALSE"},{"path":"https://pjt222.github.io/putior/dev/index.html","id":"uuid-auto-generation","dir":"","previous_headings":"üõ†Ô∏è Advanced Usage","what":"UUID Auto-Generation","title":"putior: Register In- and Outputs for Workflow Visualization","text":"omit id field, putior automatically generates unique UUID: feature perfect : - Quick prototyping without worrying unique IDs - Temporary workflows IDs don‚Äôt matter - Ensuring uniqueness across large codebases Note: provide empty id (e.g., id:\"\"), ‚Äôll get validation warning.","code":"# Annotations without explicit IDs #put label:\"Load Data\", node_type:\"input\", output:\"data.csv\" #put label:\"Process Data\", node_type:\"process\", input:\"data.csv\"  # Extract workflow - IDs will be auto-generated workflow <- put(\"./\") print(workflow$id) # [1] \"a1b2c3d4-e5f6-7890-abcd-ef1234567890\" # [2] \"b2c3d4e5-f6a7-8901-bcde-f23456789012\""},{"path":"https://pjt222.github.io/putior/dev/index.html","id":"tracking-source-relationships","dir":"","previous_headings":"üõ†Ô∏è Advanced Usage","what":"Tracking Source Relationships","title":"putior: Register In- and Outputs for Workflow Visualization","text":"main script sources scripts, annotate show sourcing relationships: creates diagram showing: - utils.R ‚Üí main.R (sourced ) - analysis.R ‚Üí main.R (sourced ) - utils.R ‚Üí analysis.R (dependency)","code":"# main.R - sources other scripts #put label:\"Main Workflow\", input:\"utils.R,analysis.R\", output:\"results.csv\" source(\"utils.R\")     # Reading utils.R into main.R source(\"analysis.R\")  # Reading analysis.R into main.R  # utils.R - sourced by main.R   #put label:\"Utility Functions\", node_type:\"input\" # output defaults to \"utils.R\"  # analysis.R - sourced by main.R, depends on utils.R #put label:\"Analysis Functions\", input:\"utils.R\"   # output defaults to \"analysis.R\""},{"path":"https://pjt222.github.io/putior/dev/index.html","id":"id_-self-documentation-putior-documents-itself","dir":"","previous_headings":"","what":"üîÑ Self-Documentation: putior Documents Itself!","title":"putior: Register In- and Outputs for Workflow Visualization","text":"demonstration putior‚Äôs capabilities, ‚Äôve added PUT annotations putior‚Äôs source code. creates beautiful visualization package works internally: Result: self-documentation shows two main phases putior: 1. Parsing Phase: Scanning files ‚Üí extracting annotations ‚Üí converting workflow data 2. Diagram Generation Phase: Taking workflow data ‚Üí creating nodes/connections ‚Üí outputting diagram see complete data flow intermediate files, run:","code":"# Extract putior's own workflow workflow <- put(\"./R/\") put_diagram(workflow, theme = \"github\", title = \"putior Package Internals\") --- title: putior Package Internals --- flowchart TD     put_entry([Entry Point - Scan Files])     process_file[Process Single File]     parser[Parse Annotation Syntax]     convert_df[Convert to Data Frame]     diagram_gen[Generate Mermaid Diagram]     node_defs[Create Node Definitions]     connections[Generate Node Connections]     output_handler([Output Final Diagram])      %% Connections     put_entry --> process_file     process_file --> parser     parser --> convert_df     convert_df --> diagram_gen     diagram_gen --> node_defs     node_defs --> connections     connections --> output_handler      %% Styling     classDef processStyle fill:#ede9fe,stroke:#7c3aed,stroke-width:2px,color:#5b21b6     class process_file processStyle     class parser processStyle     class convert_df processStyle     class diagram_gen processStyle     class node_defs processStyle     class connections processStyle     classDef startStyle fill:#fef3c7,stroke:#d97706,stroke-width:3px,color:#92400e     class put_entry startStyle     classDef endStyle fill:#dcfce7,stroke:#16a34a,stroke-width:3px,color:#15803d     class output_handler endStyle put_diagram(workflow, show_artifacts = TRUE, theme = \"github\")"},{"path":"https://pjt222.github.io/putior/dev/index.html","id":"id_-contributing","dir":"","previous_headings":"","what":"ü§ù Contributing","title":"putior: Register In- and Outputs for Workflow Visualization","text":"Contributions welcome! Please open issue pull request GitHub. Development Setup:","code":"git clone https://github.com/pjt222/putior.git cd putior  # Install dev dependencies   Rscript -e \"devtools::install_dev_deps()\"  # Run tests Rscript -e \"devtools::test()\"  # Check package Rscript -e \"devtools::check()\""},{"path":"https://pjt222.github.io/putior/dev/index.html","id":"id_-license","dir":"","previous_headings":"","what":"üìÑ License","title":"putior: Register In- and Outputs for Workflow Visualization","text":"project licensed MIT License - see LICENSE file details.","code":""},{"path":"https://pjt222.github.io/putior/dev/index.html","id":"id_-how-putior-compares-to-other-r-packages","dir":"","previous_headings":"","what":"üìä How putior Compares to Other R Packages","title":"putior: Register In- and Outputs for Workflow Visualization","text":"putior fills unique niche R ecosystem combining annotation-based workflow extraction beautiful diagram generation:","code":""},{"path":"https://pjt222.github.io/putior/dev/index.html","id":"key-advantages-of-putior","dir":"","previous_headings":"üìä How putior Compares to Other R Packages","what":"Key Advantages of putior","title":"putior: Register In- and Outputs for Workflow Visualization","text":"üìù Annotation-Based: Workflow documentation lives code comments üîÑ Multi-Language: Works across R, Python, SQL, Shell, Julia üìÅ File Flow Tracking: Automatically connects scripts based input/output files üé® Beautiful Output: GitHub-ready Mermaid diagrams multiple themes üì¶ Lightweight: Minimal dependencies (requires tools package) üîç Two Views: Simple script connections + complete data artifact flow","code":""},{"path":"https://pjt222.github.io/putior/dev/index.html","id":"id_-acknowledgments","dir":"","previous_headings":"","what":"üôè Acknowledgments","title":"putior: Register In- and Outputs for Workflow Visualization","text":"Built Mermaid beautiful diagram generation Inspired need better code documentation workflow visualization Thanks R community excellent development tooling","code":""},{"path":"https://pjt222.github.io/putior/dev/index.html","id":"id_-contributors","dir":"","previous_headings":"üôè Acknowledgments","what":"üë• Contributors","title":"putior: Register In- and Outputs for Workflow Visualization","text":"Philipp Thoss (@pjt222) - Primary author maintainer Claude (Anthropic) - Co-author 38 commits, contributing package development, documentation, testing Note: GitHub‚Äôs contributor graph displays primary commit authors, Claude‚Äôs contributions properly attributed Co-Authored-tags commit messages. see contributions, use: git log --grep=\"Co-Authored-: Claude\"","code":""},{"path":"https://pjt222.github.io/putior/dev/index.html","id":"id_-shoutout-to-related-r-packages","dir":"","previous_headings":"üôè Acknowledgments","what":"üåü Shoutout to Related R Packages","title":"putior: Register In- and Outputs for Workflow Visualization","text":"putior stands shoulders giants R visualization workflow ecosystem: CodeDepends Duncan Temple Lang - pioneering work R code dependency analysis targets William Michael Landau - powerful pipeline toolkit reproducible computation DiagrammeR Richard Iannone - bringing beautiful graph visualization R ggraph Thomas Lin Pedersen - grammar graphics networks trees visNetwork Almende B.V. - interactive network visualization excellence networkD3 Christopher Gandrud - D3.js network graphs R dm energie360¬∞ AG - relational data model visualization flowchart Adrian Antico - participant flow diagrams igraph G√°bor Cs√°rdi & Tam√°s Nepusz - foundation network analysis R packages excels domain, putior complements focusing specifically code workflow documentation annotations. Made ‚ù§Ô∏è polyglot data science workflows across R, Python, Julia, SQL, Shell, beyond","code":""},{"path":"https://pjt222.github.io/putior/dev/reference/convert_results_to_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert results list to data frame ‚Äî convert_results_to_df","title":"Convert results list to data frame ‚Äî convert_results_to_df","text":"Convert results list data frame","code":""},{"path":"https://pjt222.github.io/putior/dev/reference/convert_results_to_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert results list to data frame ‚Äî convert_results_to_df","text":"","code":"convert_results_to_df(results, include_line_numbers)"},{"path":"https://pjt222.github.io/putior/dev/reference/convert_results_to_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert results list to data frame ‚Äî convert_results_to_df","text":"results List annotation results include_line_numbers Whether line numbers included","code":""},{"path":"https://pjt222.github.io/putior/dev/reference/convert_results_to_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert results list to data frame ‚Äî convert_results_to_df","text":"Data frame","code":""},{"path":"https://pjt222.github.io/putior/dev/reference/create_artifact_nodes.html","id":null,"dir":"Reference","previous_headings":"","what":"Create artifact nodes for data files ‚Äî create_artifact_nodes","title":"Create artifact nodes for data files ‚Äî create_artifact_nodes","text":"Create artifact nodes data files","code":""},{"path":"https://pjt222.github.io/putior/dev/reference/create_artifact_nodes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create artifact nodes for data files ‚Äî create_artifact_nodes","text":"","code":"create_artifact_nodes(workflow)"},{"path":"https://pjt222.github.io/putior/dev/reference/create_artifact_nodes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create artifact nodes for data files ‚Äî create_artifact_nodes","text":"workflow Workflow data frame","code":""},{"path":"https://pjt222.github.io/putior/dev/reference/create_artifact_nodes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create artifact nodes for data files ‚Äî create_artifact_nodes","text":"Data frame artifact node definitions","code":""},{"path":"https://pjt222.github.io/putior/dev/reference/empty_result_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Create empty result data frame ‚Äî empty_result_df","title":"Create empty result data frame ‚Äî empty_result_df","text":"Create empty result data frame","code":""},{"path":"https://pjt222.github.io/putior/dev/reference/empty_result_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create empty result data frame ‚Äî empty_result_df","text":"","code":"empty_result_df(include_line_numbers = FALSE)"},{"path":"https://pjt222.github.io/putior/dev/reference/empty_result_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create empty result data frame ‚Äî empty_result_df","text":"include_line_numbers Whether include line_number column","code":""},{"path":"https://pjt222.github.io/putior/dev/reference/empty_result_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create empty result data frame ‚Äî empty_result_df","text":"Empty data frame correct structure","code":""},{"path":"https://pjt222.github.io/putior/dev/reference/generate_connections.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate connections between nodes ‚Äî generate_connections","title":"Generate connections between nodes ‚Äî generate_connections","text":"Generate connections nodes","code":""},{"path":"https://pjt222.github.io/putior/dev/reference/generate_connections.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate connections between nodes ‚Äî generate_connections","text":"","code":"generate_connections(workflow, show_files = FALSE, show_artifacts = FALSE)"},{"path":"https://pjt222.github.io/putior/dev/reference/generate_connections.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate connections between nodes ‚Äî generate_connections","text":"workflow Workflow data frame combined script artifact nodes show_files Whether show file-based connections show_artifacts Whether artifacts included workflow","code":""},{"path":"https://pjt222.github.io/putior/dev/reference/generate_connections.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate connections between nodes ‚Äî generate_connections","text":"Character vector connection definitions","code":""},{"path":"https://pjt222.github.io/putior/dev/reference/generate_node_definitions.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate node definitions for mermaid diagram ‚Äî generate_node_definitions","title":"Generate node definitions for mermaid diagram ‚Äî generate_node_definitions","text":"Generate node definitions mermaid diagram","code":""},{"path":"https://pjt222.github.io/putior/dev/reference/generate_node_definitions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate node definitions for mermaid diagram ‚Äî generate_node_definitions","text":"","code":"generate_node_definitions(   workflow,   node_labels = \"label\",   show_workflow_boundaries = TRUE )"},{"path":"https://pjt222.github.io/putior/dev/reference/generate_node_definitions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate node definitions for mermaid diagram ‚Äî generate_node_definitions","text":"workflow Workflow data frame node_labels show node labels show_workflow_boundaries Whether apply special styling start/end nodes","code":""},{"path":"https://pjt222.github.io/putior/dev/reference/generate_node_definitions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate node definitions for mermaid diagram ‚Äî generate_node_definitions","text":"Character vector node definitions","code":""},{"path":"https://pjt222.github.io/putior/dev/reference/generate_node_styling.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate node styling based on node types and theme ‚Äî generate_node_styling","title":"Generate node styling based on node types and theme ‚Äî generate_node_styling","text":"Generate node styling based node types theme","code":""},{"path":"https://pjt222.github.io/putior/dev/reference/generate_node_styling.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate node styling based on node types and theme ‚Äî generate_node_styling","text":"","code":"generate_node_styling(   workflow,   theme = \"light\",   show_workflow_boundaries = TRUE )"},{"path":"https://pjt222.github.io/putior/dev/reference/generate_node_styling.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate node styling based on node types and theme ‚Äî generate_node_styling","text":"workflow Workflow data frame theme Color theme (\"light\", \"dark\", \"auto\", \"minimal\", \"github\")","code":""},{"path":"https://pjt222.github.io/putior/dev/reference/generate_node_styling.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate node styling based on node types and theme ‚Äî generate_node_styling","text":"Character vector styling definitions","code":""},{"path":"https://pjt222.github.io/putior/dev/reference/get_diagram_themes.html","id":null,"dir":"Reference","previous_headings":"","what":"Get available themes for put_diagram ‚Äî get_diagram_themes","title":"Get available themes for put_diagram ‚Äî get_diagram_themes","text":"Returns information available color themes workflow diagrams.","code":""},{"path":"https://pjt222.github.io/putior/dev/reference/get_diagram_themes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get available themes for put_diagram ‚Äî get_diagram_themes","text":"","code":"get_diagram_themes()"},{"path":"https://pjt222.github.io/putior/dev/reference/get_diagram_themes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get available themes for put_diagram ‚Äî get_diagram_themes","text":"Named list describing available themes","code":""},{"path":"https://pjt222.github.io/putior/dev/reference/get_diagram_themes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get available themes for put_diagram ‚Äî get_diagram_themes","text":"","code":"# See available themes get_diagram_themes() #> $light #> [1] \"Default light theme with bright colors - perfect for documentation sites\" #>  #> $dark #> [1] \"Dark theme with muted colors - ideal for dark mode environments and terminals\" #>  #> $auto #> [1] \"GitHub-adaptive theme with solid colors that work in both light and dark modes\" #>  #> $minimal #> [1] \"Grayscale professional theme - print-friendly and great for business documents\" #>  #> $github #> [1] \"Optimized specifically for GitHub README files with maximum mermaid compatibility\" #>   if (FALSE) { # \\dontrun{ # Use a specific theme (requires actual workflow data) workflow <- put(\"./src\") put_diagram(workflow, theme = \"github\") } # }"},{"path":"https://pjt222.github.io/putior/dev/reference/get_node_shape.html","id":null,"dir":"Reference","previous_headings":"","what":"Get node shape characters based on node type ‚Äî get_node_shape","title":"Get node shape characters based on node type ‚Äî get_node_shape","text":"Get node shape characters based node type","code":""},{"path":"https://pjt222.github.io/putior/dev/reference/get_node_shape.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get node shape characters based on node type ‚Äî get_node_shape","text":"","code":"get_node_shape(node_type, show_workflow_boundaries = TRUE)"},{"path":"https://pjt222.github.io/putior/dev/reference/get_node_shape.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get node shape characters based on node type ‚Äî get_node_shape","text":"node_type Node type string show_workflow_boundaries Whether apply special workflow boundary styling","code":""},{"path":"https://pjt222.github.io/putior/dev/reference/get_node_shape.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get node shape characters based on node type ‚Äî get_node_shape","text":"Character vector opening closing shape characters","code":""},{"path":"https://pjt222.github.io/putior/dev/reference/get_theme_colors.html","id":null,"dir":"Reference","previous_headings":"","what":"Get color schemes for different themes (FIXED VERSION) ‚Äî get_theme_colors","title":"Get color schemes for different themes (FIXED VERSION) ‚Äî get_theme_colors","text":"Get color schemes different themes (FIXED VERSION)","code":""},{"path":"https://pjt222.github.io/putior/dev/reference/get_theme_colors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get color schemes for different themes (FIXED VERSION) ‚Äî get_theme_colors","text":"","code":"get_theme_colors(theme)"},{"path":"https://pjt222.github.io/putior/dev/reference/get_theme_colors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get color schemes for different themes (FIXED VERSION) ‚Äî get_theme_colors","text":"theme Theme name","code":""},{"path":"https://pjt222.github.io/putior/dev/reference/get_theme_colors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get color schemes for different themes (FIXED VERSION) ‚Äî get_theme_colors","text":"Named list color definitions node type","code":""},{"path":"https://pjt222.github.io/putior/dev/reference/handle_output.html","id":null,"dir":"Reference","previous_headings":"","what":"Handle diagram output to different destinations ‚Äî handle_output","title":"Handle diagram output to different destinations ‚Äî handle_output","text":"Handle diagram output different destinations","code":""},{"path":"https://pjt222.github.io/putior/dev/reference/handle_output.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Handle diagram output to different destinations ‚Äî handle_output","text":"","code":"handle_output(mermaid_code, output = \"console\", file = NULL, title = NULL)"},{"path":"https://pjt222.github.io/putior/dev/reference/handle_output.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Handle diagram output to different destinations ‚Äî handle_output","text":"mermaid_code Generated mermaid code output Output format file File path file output title Diagram title","code":""},{"path":"https://pjt222.github.io/putior/dev/reference/is_valid_put_annotation.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate PUT annotation syntax ‚Äî is_valid_put_annotation","title":"Validate PUT annotation syntax ‚Äî is_valid_put_annotation","text":"Test helper function validate PUT annotation syntax","code":""},{"path":"https://pjt222.github.io/putior/dev/reference/is_valid_put_annotation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate PUT annotation syntax ‚Äî is_valid_put_annotation","text":"","code":"is_valid_put_annotation(line)"},{"path":"https://pjt222.github.io/putior/dev/reference/is_valid_put_annotation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate PUT annotation syntax ‚Äî is_valid_put_annotation","text":"line Character string containing PUT annotation","code":""},{"path":"https://pjt222.github.io/putior/dev/reference/is_valid_put_annotation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate PUT annotation syntax ‚Äî is_valid_put_annotation","text":"Logical indicating annotation valid","code":""},{"path":"https://pjt222.github.io/putior/dev/reference/is_valid_put_annotation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Validate PUT annotation syntax ‚Äî is_valid_put_annotation","text":"","code":"is_valid_put_annotation('#put name:\"test\", label:\"Test\"') # TRUE #> [1] TRUE is_valid_put_annotation(\"#put invalid syntax\") # FALSE #> [1] FALSE"},{"path":"https://pjt222.github.io/putior/dev/reference/parse_comma_separated_pairs.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse comma-separated pairs while respecting quotes ‚Äî parse_comma_separated_pairs","title":"Parse comma-separated pairs while respecting quotes ‚Äî parse_comma_separated_pairs","text":"Parse comma-separated pairs respecting quotes","code":""},{"path":"https://pjt222.github.io/putior/dev/reference/parse_comma_separated_pairs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse comma-separated pairs while respecting quotes ‚Äî parse_comma_separated_pairs","text":"","code":"parse_comma_separated_pairs(text)"},{"path":"https://pjt222.github.io/putior/dev/reference/parse_comma_separated_pairs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse comma-separated pairs while respecting quotes ‚Äî parse_comma_separated_pairs","text":"text Text parse","code":""},{"path":"https://pjt222.github.io/putior/dev/reference/parse_comma_separated_pairs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse comma-separated pairs while respecting quotes ‚Äî parse_comma_separated_pairs","text":"Character vector pairs","code":""},{"path":"https://pjt222.github.io/putior/dev/reference/parse_put_annotation.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract PUT Annotation Properties ‚Äî parse_put_annotation","title":"Extract PUT Annotation Properties ‚Äî parse_put_annotation","text":"Parses single line containing PUT annotation extracts key-value pairs. Supports flexible syntax optional spaces pipe separators.","code":""},{"path":"https://pjt222.github.io/putior/dev/reference/parse_put_annotation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract PUT Annotation Properties ‚Äî parse_put_annotation","text":"","code":"parse_put_annotation(line)"},{"path":"https://pjt222.github.io/putior/dev/reference/parse_put_annotation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract PUT Annotation Properties ‚Äî parse_put_annotation","text":"line Character string containing PUT annotation","code":""},{"path":"https://pjt222.github.io/putior/dev/reference/parse_put_annotation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract PUT Annotation Properties ‚Äî parse_put_annotation","text":"Named list containing extracted properties, NULL invalid","code":""},{"path":"https://pjt222.github.io/putior/dev/reference/process_single_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Process a single file for PUT annotations ‚Äî process_single_file","title":"Process a single file for PUT annotations ‚Äî process_single_file","text":"Process single file PUT annotations","code":""},{"path":"https://pjt222.github.io/putior/dev/reference/process_single_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process a single file for PUT annotations ‚Äî process_single_file","text":"","code":"process_single_file(file, include_line_numbers, validate)"},{"path":"https://pjt222.github.io/putior/dev/reference/process_single_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process a single file for PUT annotations ‚Äî process_single_file","text":"file Path file include_line_numbers Whether include line numbers validate Whether validate annotations","code":""},{"path":"https://pjt222.github.io/putior/dev/reference/process_single_file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Process a single file for PUT annotations ‚Äî process_single_file","text":"List annotation results error message","code":""},{"path":"https://pjt222.github.io/putior/dev/reference/put.html","id":null,"dir":"Reference","previous_headings":"","what":"Scan R and Python Files for PUT Annotations ‚Äî put","title":"Scan R and Python Files for PUT Annotations ‚Äî put","text":"Scans source files directory PUT annotations define workflow nodes, inputs, outputs, metadata. Supports R Python files flexible annotation syntax including single-line multiline formats.","code":""},{"path":"https://pjt222.github.io/putior/dev/reference/put.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Scan R and Python Files for PUT Annotations ‚Äî put","text":"","code":"put(   path,   pattern = \"\\\\.(R|r|py|sql|sh|jl)$\",   recursive = FALSE,   include_line_numbers = FALSE,   validate = TRUE )"},{"path":"https://pjt222.github.io/putior/dev/reference/put.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Scan R and Python Files for PUT Annotations ‚Äî put","text":"path Character string specifying path folder containing files, path single file pattern Character string specifying file pattern match. Default: \"\\.(R|r|py|sql|sh|jl)$\" (R, Python, SQL, shell, Julia files) recursive Logical. subdirectories searched recursively? Default: FALSE include_line_numbers Logical. line numbers included output? Default: FALSE validate Logical. annotations validated common issues? Default: TRUE","code":""},{"path":"https://pjt222.github.io/putior/dev/reference/put.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Scan R and Python Files for PUT Annotations ‚Äî put","text":"data frame containing file names properties found annotations. Always includes columns: file_name, file_type, properties found PUT annotations (typically: id, label, node_type, input, output). include_line_numbers TRUE, also includes line_number. Note: output specified annotation, defaults file name.","code":""},{"path":"https://pjt222.github.io/putior/dev/reference/put.html","id":"put-annotation-syntax","dir":"Reference","previous_headings":"","what":"PUT Annotation Syntax","title":"Scan R and Python Files for PUT Annotations ‚Äî put","text":"PUT annotations can written single-line multiline format: Single-line format: parameters one line   Multiline format: Use backslash (\\) line continuation   Benefits multiline format: Compliance code style guidelines (styler, lintr) Improved readability complex workflows Easier maintenance long file lists Better code organization documentation Syntax rules: End lines backslash (\\) continue continuation line must start # comment marker Properties automatically joined proper comma separation Works PUT formats: #put, # put, #put|, #put:","code":"#put id:\"node1\", label:\"Process Data\", input:\"data.csv\", output:\"result.csv\" #put id:\"node1\", label:\"Process Data\", \\ #    input:\"data.csv\", \\ #    output:\"result.csv\""},{"path":"https://pjt222.github.io/putior/dev/reference/put.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Scan R and Python Files for PUT Annotations ‚Äî put","text":"","code":"if (FALSE) { # \\dontrun{ # Scan a directory for workflow annotations workflow <- put(\"./src/\")  # Scan recursively including subdirectories workflow <- put(\"./project/\", recursive = TRUE)  # Scan a single file workflow <- put(\"./script.R\")  # Include line numbers for debugging workflow <- put(\"./src/\", include_line_numbers = TRUE)  # Single-line PUT annotations (basic syntax): # #put id:\"load_data\", label:\"Load Dataset\", node_type:\"input\", output:\"data.csv\" # #put id:\"process\", label:\"Clean Data\", node_type:\"process\", input:\"data.csv\", output:\"clean.csv\" # # Multiline PUT annotations (for better code style compliance): # Use backslash (\\) at end of line to continue on next line # #put id:\"complex_process\", label:\"Complex Data Processing\", \\ # #    input:\"file1.csv,file2.csv,file3.csv,file4.csv\", \\ # #    output:\"results.csv\" # # Multiline example with many files: # #put id:\"data_merger\", \\ # #    label:\"Merge Multiple Data Sources\", \\ # #    node_type:\"process\", \\ # #    input:\"sales.csv,customers.csv,products.csv,inventory.csv\", \\ # #    output:\"merged_dataset.csv\" # # All PUT formats support multiline syntax: # # put id:\"style1\", label:\"Standard\" \\     # Space after # # #put| id:\"style2\", label:\"Pipe\" \\        # Pipe separator # #put: id:\"style3\", label:\"Colon\" \\       # Colon separator } # }"},{"path":"https://pjt222.github.io/putior/dev/reference/put_diagram.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Mermaid Diagram from PUT Workflow ‚Äî put_diagram","title":"Create Mermaid Diagram from PUT Workflow ‚Äî put_diagram","text":"Generates Mermaid flowchart diagram putior workflow data, showing flow data analysis pipeline.","code":""},{"path":"https://pjt222.github.io/putior/dev/reference/put_diagram.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Mermaid Diagram from PUT Workflow ‚Äî put_diagram","text":"","code":"put_diagram(   workflow,   output = \"console\",   file = \"workflow_diagram.md\",   title = NULL,   direction = \"TD\",   node_labels = \"label\",   show_files = FALSE,   show_artifacts = FALSE,   show_workflow_boundaries = TRUE,   style_nodes = TRUE,   theme = \"light\" )"},{"path":"https://pjt222.github.io/putior/dev/reference/put_diagram.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Mermaid Diagram from PUT Workflow ‚Äî put_diagram","text":"workflow Data frame returned put() containing workflow nodes output Character string specifying output format. Options: \"console\" - Print console (default) \"file\" - Save file specified file parameter \"clipboard\" - Copy clipboard (available) \"raw\" - Return raw mermaid code without markdown fences (knitr/pkgdown) file Character string specifying output file path (used output = \"file\") title Character string diagram title (optional) direction Character string specifying diagram direction. Options: \"TD\" (top-), \"LR\" (left-right), \"BT\" (bottom-top), \"RL\" (right-left) node_labels Character string specifying show nodes: \"name\" (node IDs), \"label\" (descriptions), \"\" (ID: label) show_files Logical indicating whether show file connections show_artifacts Logical indicating whether show data files nodes. TRUE, creates nodes input/output files, just script connections. provides complete view data flow including terminal outputs. show_workflow_boundaries Logical indicating whether apply special styling nodes node_type \"start\" \"end\". TRUE, nodes get distinctive workflow boundary styling (icons, colors). FALSE, render regular nodes. style_nodes Logical indicating whether apply styling based node_type theme Character string specifying color theme. Options: \"light\" (default), \"dark\", \"auto\" (GitHub adaptive), \"minimal\", \"github\"","code":""},{"path":"https://pjt222.github.io/putior/dev/reference/put_diagram.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Mermaid Diagram from PUT Workflow ‚Äî put_diagram","text":"Character string containing mermaid diagram code","code":""},{"path":"https://pjt222.github.io/putior/dev/reference/put_diagram.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Mermaid Diagram from PUT Workflow ‚Äî put_diagram","text":"","code":"if (FALSE) { # \\dontrun{ # Basic usage - shows only script connections workflow <- put(\"./src/\") put_diagram(workflow)  # Show all data artifacts as nodes (complete data flow) put_diagram(workflow, show_artifacts = TRUE)  # Show artifacts with file labels on connections put_diagram(workflow, show_artifacts = TRUE, show_files = TRUE)  # Show workflow boundaries with special start/end styling put_diagram(workflow, show_workflow_boundaries = TRUE)  # Disable workflow boundaries (start/end nodes render as regular) put_diagram(workflow, show_workflow_boundaries = FALSE)  # GitHub-optimized theme for README files put_diagram(workflow, theme = \"github\")  # Save to file with artifacts enabled put_diagram(workflow, show_artifacts = TRUE, output = \"file\", file = \"workflow.md\")  # For use in knitr/pkgdown - returns raw mermaid code # Use within a code chunk with results='asis' cat(\"```mermaid\\n\", put_diagram(workflow, output = \"raw\"), \"\\n```\\n\") } # }"},{"path":"https://pjt222.github.io/putior/dev/reference/sanitize_node_id.html","id":null,"dir":"Reference","previous_headings":"","what":"Sanitize node ID for mermaid compatibility (IMPROVED VERSION) ‚Äî sanitize_node_id","title":"Sanitize node ID for mermaid compatibility (IMPROVED VERSION) ‚Äî sanitize_node_id","text":"Sanitize node ID mermaid compatibility (IMPROVED VERSION)","code":""},{"path":"https://pjt222.github.io/putior/dev/reference/sanitize_node_id.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sanitize node ID for mermaid compatibility (IMPROVED VERSION) ‚Äî sanitize_node_id","text":"","code":"sanitize_node_id(node_id)"},{"path":"https://pjt222.github.io/putior/dev/reference/sanitize_node_id.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sanitize node ID for mermaid compatibility (IMPROVED VERSION) ‚Äî sanitize_node_id","text":"node_id Raw node identifier","code":""},{"path":"https://pjt222.github.io/putior/dev/reference/sanitize_node_id.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sanitize node ID for mermaid compatibility (IMPROVED VERSION) ‚Äî sanitize_node_id","text":"Sanitized identifier safe mermaid","code":""},{"path":"https://pjt222.github.io/putior/dev/reference/split_file_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Split comma-separated file list ‚Äî split_file_list","title":"Split comma-separated file list ‚Äî split_file_list","text":"Split comma-separated file list","code":""},{"path":"https://pjt222.github.io/putior/dev/reference/split_file_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split comma-separated file list ‚Äî split_file_list","text":"","code":"split_file_list(file_string)"},{"path":"https://pjt222.github.io/putior/dev/reference/split_file_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split comma-separated file list ‚Äî split_file_list","text":"file_string Comma-separated file names","code":""},{"path":"https://pjt222.github.io/putior/dev/reference/split_file_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Split comma-separated file list ‚Äî split_file_list","text":"Character vector individual file names","code":""},{"path":"https://pjt222.github.io/putior/dev/reference/validate_annotation.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate PUT annotation for common issues ‚Äî validate_annotation","title":"Validate PUT annotation for common issues ‚Äî validate_annotation","text":"Validate PUT annotation common issues","code":""},{"path":"https://pjt222.github.io/putior/dev/reference/validate_annotation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate PUT annotation for common issues ‚Äî validate_annotation","text":"","code":"validate_annotation(properties, line_content)"},{"path":"https://pjt222.github.io/putior/dev/reference/validate_annotation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate PUT annotation for common issues ‚Äî validate_annotation","text":"properties List annotation properties line_content Original line content","code":""},{"path":"https://pjt222.github.io/putior/dev/reference/validate_annotation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate PUT annotation for common issues ‚Äî validate_annotation","text":"Character vector validation issues","code":""},{"path":[]},{"path":"https://pjt222.github.io/putior/dev/news/index.html","id":"putior-010","dir":"Changelog","previous_headings":"","what":"putior 0.1.0","title":"putior 0.1.0","text":"CRAN release: 2025-06-19 Initial CRAN submission Added put() function extracting workflow annotations source code files Added put_diagram() function creating Mermaid flowchart diagrams Added is_valid_put_annotation() validating annotation syntax Support multiple programming languages: R, Python, SQL, Shell, Julia Multiline annotation support backslash continuation syntax better code style compliance Automatic UUID generation id field omitted annotations Automatic output defaulting file name output field omitted Renamed annotation field name id better graph theory alignment Five built-themes diagrams: light, dark, auto, minimal, github Automatic file flow tracking workflow steps Comprehensive vignette examples Full test coverage major functions","code":""}]
