url: https://pjt222.github.io/putior/
template:
  bootstrap: 5
  bootswatch: cosmo
  bslib:
    primary: "#0054AD"
    base_font: {google: "Roboto"}
    heading_font: {google: "Roboto Slab"}
    code_font: {google: "JetBrains Mono"}
  includes:
    in_header: |
      <script src="https://cdn.jsdelivr.net/npm/mermaid@10.9.3/dist/mermaid.min.js"></script>
      <script>
        // Initialize mermaid with configuration
        window.mermaidConfig = {
          startOnLoad: false,
          theme: 'default',
          themeVariables: {
            primaryColor: '#fff4e6',
            primaryTextColor: '#333',
            primaryBorderColor: '#d97706',
            lineColor: '#5a5a5a',
            secondaryColor: '#f3f4f6',
            tertiaryColor: '#e5e7eb'
          },
          flowchart: {
            htmlLabels: true,
            curve: 'linear'
          }
        };
        
        mermaid.initialize(window.mermaidConfig);
        
        // Function to render all mermaid diagrams
        function renderMermaidDiagrams() {
          console.log('Starting Mermaid rendering...');
          
          // Find all code blocks with language-mermaid class
          const codeBlocks = document.querySelectorAll('pre > code.language-mermaid');
          console.log('Found ' + codeBlocks.length + ' mermaid code blocks');
          
          // Also try other possible selectors
          const codeBlocks2 = document.querySelectorAll('code.mermaid');
          console.log('Found ' + codeBlocks2.length + ' code.mermaid blocks');
          
          const preBlocks = document.querySelectorAll('pre');
          console.log('Found ' + preBlocks.length + ' total pre blocks');
          
          // Log first few pre blocks to see their content
          preBlocks.forEach(function(pre, i) {
            if (i < 3) {
              console.log('Pre block ' + i + ' content:', pre.textContent.substring(0, 100));
              console.log('Pre block ' + i + ' HTML:', pre.innerHTML.substring(0, 100));
            }
          });
          
          // Process any pre blocks that contain flowchart syntax
          preBlocks.forEach(function(pre, index) {
            const text = pre.textContent || pre.innerText;
            
            // Check if this contains mermaid syntax
            if (text.includes('flowchart') || text.includes('graph') || text.includes('sequenceDiagram')) {
              console.log('Found potential mermaid in pre block ' + index);
              
              try {
                // Create container div
                const container = document.createElement('div');
                container.className = 'mermaid-container';
                
                // Create mermaid div
                const mermaidDiv = document.createElement('div');
                mermaidDiv.className = 'mermaid';
                mermaidDiv.textContent = text.trim();
                
                container.appendChild(mermaidDiv);
                pre.parentElement.insertBefore(container, pre);
                pre.style.display = 'none';
                
                console.log('Created mermaid div for pre block ' + index);
              } catch (e) {
                console.error('Error processing pre block ' + index, e);
              }
            }
          });
          
          // Now render all mermaid divs at once
          const allMermaidDivs = document.querySelectorAll('div.mermaid');
          console.log('Total mermaid divs to render: ' + allMermaidDivs.length);
          
          if (allMermaidDivs.length > 0) {
            // Use mermaid.init with the correct syntax
            mermaid.init(window.mermaidConfig, allMermaidDivs);
          }
        }
        
        // Wait for DOM to be ready
        if (document.readyState === 'loading') {
          document.addEventListener('DOMContentLoaded', renderMermaidDiagrams);
        } else {
          // DOM is already ready
          setTimeout(renderMermaidDiagrams, 100);
        }
        
        // Also try after a delay in case content is dynamically loaded
        setTimeout(renderMermaidDiagrams, 1000);
      </script>
    after_body: |
      <style>
        /* Mermaid diagram styling */
        .mermaid {
          text-align: center;
          margin: 20px 0;
        }
        
        /* Ensure mermaid diagrams are responsive */
        .mermaid svg {
          max-width: 100%;
          height: auto;
        }
        
        /* Fix for code blocks that contain mermaid */
        pre.mermaid {
          background: transparent;
          border: none;
          padding: 0;
        }
        
        /* Add container for processed mermaid diagrams */
        div.mermaid-container {
          text-align: center;
          margin: 1em 0;
        }
      </style>

home:
  title: "putior: Register in- and Outputs for Workflow Visualization"
  description: >
    Extract structured annotations from source code files and generate 
    Mermaid flowchart diagrams for visualizing workflows and data pipelines.
  
  links:
  - text: Report a bug
    href: https://github.com/pjt222/putior/issues
  - text: Browse source code
    href: https://github.com/pjt222/putior

navbar:
  structure:
    left: [intro, reference, articles, news]
    right: [search, github]
  components:
    home:
      icon: fas fa-home
      href: index.html
    intro:
      text: Get started
      href: articles/getting-started.html
    articles:
      text: Articles
      menu:
      - text: Getting Started with putior
        href: articles/getting-started.html

reference:
- title: "Core Functions"
  desc: "Main functions for extracting annotations and creating diagrams"
  contents:
  - put
  - put_diagram

- title: "Helper Functions"
  desc: "Supporting functions for processing annotations"
  contents:
  - parse_put_annotation
  - validate_annotation
  - is_valid_put_annotation
  - process_single_file
  - split_file_list

- title: "Diagram Generation"
  desc: "Functions for creating Mermaid diagrams"
  contents:
  - generate_node_definitions
  - generate_connections
  - generate_node_styling
  - create_artifact_nodes
  - get_diagram_themes
  - get_theme_colors
  - get_node_shape
  - sanitize_node_id

- title: "Data Processing"
  desc: "Functions for handling results"
  contents:
  - convert_results_to_df
  - empty_result_df
  - handle_output
  - parse_comma_separated_pairs

authors:
  Philipp Thoss:
    href: https://orcid.org/0000-0002-4672-2792

development:
  mode: auto

