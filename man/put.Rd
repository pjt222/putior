% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/putior.R
\name{put}
\alias{put}
\title{Scan R and Python Files for PUT Annotations}
\usage{
put(
  path,
  pattern = "\\\\.(R|r|py|sql|sh|jl)$",
  recursive = FALSE,
  include_line_numbers = FALSE,
  validate = TRUE
)
}
\arguments{
\item{path}{Character string specifying the path to the folder containing files,
or path to a single file}

\item{pattern}{Character string specifying the file pattern to match.
Default: "\\.(R|r|py|sql|sh|jl)$" (R, Python, SQL, shell, Julia files)}

\item{recursive}{Logical. Should subdirectories be searched recursively?
Default: FALSE}

\item{include_line_numbers}{Logical. Should line numbers be included in output?
Default: FALSE}

\item{validate}{Logical. Should annotations be validated for common issues?
Default: TRUE}
}
\value{
A data frame containing file names and all properties found in annotations.
Always includes columns: file_name, file_type, and any properties found in
PUT annotations (typically: id, label, node_type, input, output).
If include_line_numbers is TRUE, also includes line_number.
Note: If output is not specified in an annotation, it defaults to the file name.
}
\description{
Scans source files in a directory for PUT annotations that define workflow
nodes, inputs, outputs, and metadata. Supports both R and Python files with
flexible annotation syntax.
}
\examples{
\dontrun{
# Scan a directory for workflow annotations
workflow <- put("./src/")

# Scan recursively including subdirectories
workflow <- put("./project/", recursive = TRUE)

# Scan a single file
workflow <- put("./script.R")

# Include line numbers for debugging
workflow <- put("./src/", include_line_numbers = TRUE)

# Example annotations in your source files:
# #put id:"load_data", label:"Load Dataset", node_type:"input", output:"data.csv"
# #put id:"process", label:"Clean Data", node_type:"process", input:"data.csv", output:"clean.csv"
#
# Multiline annotations for long input/output lists:
# #put id:"complex_process", label:"Complex Data Processing", \
# #    input:"file1.csv,file2.csv,file3.csv,file4.csv", \
# #    output:"results.csv"
}
}
